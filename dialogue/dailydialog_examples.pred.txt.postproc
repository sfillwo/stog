# ::id 0
# ::snt Say  ,  Jim  ,  how about going for a few beers after dinner  ?
# ::tokens ["Say", ",", "PERSON_1", ",", "how", "about", "going", "for", "a", "few", "beers", "after", "dinner", "?"]
# ::lemmas ["say", ",", "PERSON_1", ",", "how", "about", "go", "for", "a", "few", "beer", "after", "dinner", "?"]
# ::pos_tags ["VB", ",", "NNP", ",", "WRB", "RB", "VBG", "IN", "DT", "JJ", "NNS", "IN", "NN", "."]
# ::ner_tags ["O", "O", "PERSON", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::abstract_map {"PERSON_1": {"type": "named-entity", "span": "Jim", "ner": "PERSON", "ops": "Jim"}}
(vv1 / say-01
      :ARG0 (vv3 / person
            :name (vv4 / name
                  :op1 "Jim"))
      :ARG1 (vv5 / amr-unknown
            :manner-of (vv6 / go-03
                  :ARG1 (vv7 / beer
                        :quant (vv8 / few))
                  :time (vv9 / after
                        :op1 (vv10 / dinner))))
      :mode imperative)

# ::id 1
# ::snt You know that is tempting but is really not good for our fitness  .
# ::tokens ["You", "know", "that", "is", "tempting", "but", "is", "really", "not", "good", "for", "our", "fitness", "."]
# ::lemmas ["you", "know", "that", "be", "tempting", "but", "be", "really", "not", "good", "for", "we", "fitness", "."]
# ::pos_tags ["PRP", "VBP", "DT", "VBZ", "JJ", "CC", "VBZ", "RB", "RB", "JJ", "IN", "PRP$", "NN", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::abstract_map {}
(vv1 / contrast-01
      :ARG1 (vv2 / know-01
            :ARG0 (vv3 / you)
            :ARG1 (vv4 / weak-02
                  :ARG1 (vv5 / that)))
      :ARG2 (vv6 / good-02
            :ARG1 (vv7 / fitness
                  :poss (vv8 / we))
            :ARG1-of (vv9 / real-04)
            :polarity -))

# ::id 2
# ::snt What do you mean  ?  It will help us to relax  .
# ::tokens ["What", "do", "you", "mean", "?", "It", "will", "help", "us", "to", "relax", "."]
# ::lemmas ["what", "do", "you", "mean", "?", "it", "will", "help", "we", "to", "relax", "."]
# ::pos_tags ["WP", "VBP", "PRP", "VB", ".", "PRP", "MD", "VB", "PRP", "TO", "VB", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::abstract_map {}
(vv1 / multi-sentence
      :snt1 (vv2 / mean-01
            :ARG0 (vv3 / you)
            :ARG2 (vv4 / amr-unknown))
      :snt2 (vv5 / help-01
            :ARG0 (vv6 / it)
            :ARG1 (vv7 / relax-01
                  :ARG1 (vv8 / we))))

# ::id 3
# ::snt Do you really think so  ?  I don't  .  It will just make us fat and act silly  .  Remember last time  ?
# ::tokens ["Do", "you", "really", "think", "so", "?", "I", "do", "n't", ".", "It", "will", "just", "make", "us", "fat", "and", "act", "silly", ".", "Remember", "last", "time", "?"]
# ::lemmas ["do", "you", "really", "think", "so", "?", "I", "do", "not", ".", "it", "will", "just", "make", "we", "fat", "and", "act", "silly", ".", "remember", "last", "time", "?"]
# ::pos_tags ["VBP", "PRP", "RB", "VBP", "RB", ".", "PRP", "VBP", "RB", ".", "PRP", "MD", "RB", "VB", "PRP", "JJ", "CC", "VBP", "JJ", ".", "VB", "JJ", "NN", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::abstract_map {}
(vv1 / multi-sentence
      :snt1 (vv2 / think-01
            :ARG0 (vv4 / you)
            :ARG1 (vv5 / so)
            :ARG1-of (vv6 / real-04)
            :mode interrogative)
      :snt2 (vv7 / make-02
            :ARG0 (vv8 / i)
            :ARG1 (vv9 / and
                  :op1 (vv10 / fat
                        :domain (vv11 / we))
                  :op2 (vv12 / act-01
                        :ARG0 vv11))
            :mod (vv14 / just))
      :snt3 (vv15 / remember-01
            :ARG0 vv11
            :ARG1 (vv17 / silly
                  :mod (vv18 / last))))

# ::id 4
# ::snt I guess you are right . But what shall we do  ?  I don't feel like sitting at home  .
# ::tokens ["I", "guess", "you", "are", "right", ".", "But", "what", "shall", "we", "do", "?", "I", "do", "n't", "feel", "like", "sitting", "at", "home", "."]
# ::lemmas ["I", "guess", "you", "be", "right", ".", "but", "what", "shall", "we", "do", "?", "I", "do", "not", "feel", "like", "sit", "at", "home", "."]
# ::pos_tags ["PRP", "VBP", "PRP", "VBP", "JJ", ".", "CC", "WP", "MD", "PRP", "VB", ".", "PRP", "VBP", "RB", "VB", "IN", "VBG", "IN", "NN", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::abstract_map {}
(vv1 / multi-sentence
      :snt1 (vv2 / guess-01
            :ARG0 (vv3 / i)
            :ARG1 (vv4 / right-06
                  :ARG1 (vv5 / you)))
      :snt2 (vv6 / contrast-01
            :ARG1 (vv7 / do-02
                  :ARG0 (vv8 / we)
                  :ARG1 (vv9 / amr-unknown))
            :ARG2 (vv10 / feel-02
                  :ARG0 vv3
                  :ARG1 (vv12 / sit-01
                        :ARG1 vv3
                        :ARG2 (vv14 / home))
                  :polarity -)))

# ::id 5
# ::snt I suggest a walk over to the gym where we can play singsong and meet some of our friends  .
# ::tokens ["I", "suggest", "a", "walk", "over", "to", "the", "gym", "where", "we", "can", "play", "singsong", "and", "meet", "some", "of", "our", "friends", "."]
# ::lemmas ["I", "suggest", "a", "walk", "over", "to", "the", "gym", "where", "we", "can", "play", "singsong", "and", "meet", "some", "of", "we", "friend", "."]
# ::pos_tags ["PRP", "VBP", "DT", "NN", "IN", "IN", "DT", "NN", "WRB", "PRP", "MD", "VB", "NN", "CC", "VB", "DT", "IN", "PRP$", "NNS", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::abstract_map {}
(vv1 / suggest-01
      :ARG0 (vv2 / i)
      :ARG1 (vv3 / walk-01
            :ARG2 (vv4 / over
                  :op1 (vv5 / gym))
            :purpose (vv6 / possible-01
                  :ARG1 (vv7 / and
                        :op1 (vv8 / play-01
                              :ARG0 (vv9 / we)
                              :ARG1 (vv10 / singsong))
                        :op2 (vv11 / meet-02
                              :ARG0 vv9
                              :ARG1 (vv13 / person
                                    :ARG0-of (vv14 / have-rel-role-91
                                          :ARG1 vv9
                                          :ARG2 (vv16 / friend))
                                    :quant (vv17 / some)))))))

# ::id 6
# ::snt That's a good idea  .  I hear Mary and Sally often go there to play pingpong . Perhaps we can make a foursome with them  .
# ::tokens ["That", "'s", "a", "good", "idea", ".", "I", "hear", "PERSON_1", "and", "Sally", "often", "go", "there", "to", "play", "pingpong", ".", "Perhaps", "we", "can", "make", "a", "foursome", "with", "them", "."]
# ::lemmas ["that", "be", "a", "good", "idea", ".", "I", "hear", "PERSON_1", "and", "Sally", "often", "go", "there", "to", "play", "pingpong", ".", "perhaps", "we", "can", "make", "a", "foursome", "with", "they", "."]
# ::pos_tags ["DT", "VBZ", "DT", "JJ", "NN", ".", "PRP", "VBP", "NNP", "CC", "NNP", "RB", "VBP", "RB", "TO", "VB", "NN", ".", "RB", "PRP", "MD", "VB", "DT", "NN", "IN", "PRP", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "PERSON", "O", "PERSON", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::abstract_map {"PERSON_1": {"type": "named-entity", "span": "Mary", "ner": "PERSON", "ops": "Mary"}}
(vv1 / multi-sentence
      :snt1 (vv2 / idea
            :ARG1-of (vv3 / good-02
                  :ARG2 (vv4 / that)))
      :snt2 (vv5 / hear-01
            :ARG0 (vv6 / i)
            :ARG1 (vv7 / go-02
                  :ARG0 (vv8 / and
                        :op1 (vv9 / person
                              :name (vv10 / name
                                    :op1 "Mary"))
                        :op2 (vv11 / person
                              :ARG0-of (vv12 / have-rel-role-91
                                    :ARG1 vv9
                                    :ARG2 (vv15 / Sally))))
                  :ARG4 (vv16 / there)
                  :frequency (vv17 / often)
                  :purpose (vv18 / play-01
                        :ARG0 vv8
                        :ARG1 (vv20 / pingpong))))
      :snt3 (vv21 / possible-01
            :ARG1 (vv22 / make-01
                  :ARG0 (vv23 / we)
                  :ARG1 (vv24 / foursome)
                  :ARG2 (vv25 / they))))

# ::id 7
# ::snt Sounds great to me  !  If they are willing  ,  we could ask them to go dancing with us . That is excellent exercise and fun  ,  too  .
# ::tokens ["Sounds", "great", "to", "me", "!", "If", "they", "are", "willing", ",", "we", "could", "ask", "them", "to", "go", "dancing", "with", "us", ".", "That", "is", "excellent", "exercise", "and", "fun", ",", "too", "."]
# ::lemmas ["sound", "great", "to", "I", "!", "if", "they", "be", "willing", ",", "we", "could", "ask", "they", "to", "go", "dance", "with", "we", ".", "that", "be", "excellent", "exercise", "and", "fun", ",", "too", "."]
# ::pos_tags ["VBZ", "JJ", "IN", "PRP", ".", "IN", "PRP", "VBP", "JJ", ",", "PRP", "MD", "VB", "PRP", "TO", "VB", "VBG", "IN", "PRP", ".", "DT", "VBZ", "JJ", "NN", "CC", "NN", ",", "RB", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::abstract_map {}
(vv1 / multi-sentence
      :snt1 (vv2 / sound-01
            :ARG2 (vv3 / great)
            :ARG3 (vv4 / i))
      :snt2 (vv5 / possible-01
            :ARG1 (vv6 / ask-02
                  :ARG0 (vv7 / we)
                  :ARG1 (vv8 / go-02
                        :ARG0 (vv9 / they)
                        :ARG4 (vv10 / dance-01
                              :ARG0 vv9
                              :ARG1 (vv12 / we)))
                  :condition (vv13 / will-02
                        :ARG0 vv12
                        :ARG1 (vv15 / and
                              :op1 (vv16 / exercise
                                    :ARG1-of (vv17 / excellent-02)
                                    :domain (vv18 / that))
                              :op2 (vv19 / fun-01
                                    :ARG1 vv18))
                        :mod (vv21 / too)))))

# ::id 8
# ::snt Good . Let's go now  .
# ::tokens ["Good", ".", "Let", "'s", "go", "now", "."]
# ::lemmas ["good", ".", "let", "'s", "go", "now", "."]
# ::pos_tags ["JJ", ".", "VB", "PRP", "VB", "RB", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "DATE", "O"]
# ::abstract_map {}
(vv1 / multi-sentence
      :snt1 (vv2 / good-02
            :mode expressive)
      :snt2 (vv4 / go-02
            :ARG0 (vv6 / we)
            :mode imperative
            :time (vv7 / now)))

# ::id 9
# ::snt All right  .
# ::tokens ["All", "right", "."]
# ::lemmas ["all", "right", "."]
# ::pos_tags ["RB", "RB", "."]
# ::ner_tags ["O", "O", "O"]
# ::abstract_map {}
(vv1 / right-06
      :mod (vv2 / all))

# ::id 13
# ::snt Can you do push-ups  ?
# ::tokens ["Can", "you", "do", "push-ups", "?"]
# ::lemmas ["can", "you", "do", "push-up", "?"]
# ::pos_tags ["MD", "PRP", "VB", "COMP", "."]
# ::ner_tags ["O", "O", "O", "0", "O"]
# ::abstract_map {}
(vv1 / possible-01
      :ARG1 (vv3 / do-02
            :ARG0 (vv4 / you)
            :ARG1 (vv5 / push-up-06
                  :ARG0 vv4))
      :mode interrogative)

# ::id 14
# ::snt Of course I can  .  It's a piece of cake  !  Believe it or not  ,  I can do 30 push-ups a minute  .
# ::tokens ["Of-course", "I", "can", ".", "It", "'s", "a", "piece", "of", "cake", "!", "Believe", "it", "or", "not", ",", "I", "can", "do", "10", "push-ups", "a", "minute", "."]
# ::lemmas ["of-course", "I", "can", ".", "it", "be", "a", "piece", "of", "cake", "!", "believe", "it", "or", "not", ",", "I", "can", "do", "10", "push-up", "a", "minute", "."]
# ::pos_tags ["COMP", "PRP", "MD", ".", "PRP", "VBZ", "DT", "NN", "IN", "NN", ".", "VB", "PRP", "CC", "RB", ",", "PRP", "MD", "VB", "CD", "COMP", "DT", "NN", "."]
# ::ner_tags ["0", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "NUMBER", "0", "DURATION", "DURATION", "O"]
# ::abstract_map {"10": {"type": "quantity", "span": "30", "ner": "_QUANTITY_10", "value": 30}}
(vv1 / multi-sentence
      :snt1 (vv2 / possible-01
            :ARG1 (vv3 / i)
            :mod (vv4 / of-course))
      :snt2 (vv5 / piece
            :domain (vv6 / it)
            :mod (vv7 / cake))
      :snt2 (vv8 / possible-01
            :ARG1 (vv9 / do-02
                  :ARG0 (vv10 / i)
                  :ARG1 (vv11 / push-up-06
                        :quant 30)
                  :frequency (vv13 / rate-entity-91
                        :ARG2 (vv14 / temporal-quantity
                              :quant 1
                              :unit (vv16 / minute))))))

# ::id 15
# ::snt Really  ?  I think that's impossible  !
# ::tokens ["Really", "?", "I", "think", "that", "'s", "impossible", "!"]
# ::lemmas ["really", "?", "I", "think", "that", "be", "impossible", "!"]
# ::pos_tags ["RB", ",", "PRP", "VBP", "DT", "VBZ", "JJ", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::abstract_map {}
(vv1 / multi-sentence
      :snt1 (vv2 / real-04)
      :snt2 (vv3 / think-01
            :ARG0 (vv4 / i)
            :ARG1 (vv5 / possible-01
                  :ARG1 (vv6 / that))))

# ::id 16
# ::snt You mean 30 push-ups  ?
# ::tokens ["You", "mean", "10", "push-ups", "?"]
# ::lemmas ["you", "mean", "10", "push-up", "?"]
# ::pos_tags ["PRP", "VBP", "CD", "COMP", "."]
# ::ner_tags ["O", "O", "NUMBER", "0", "O"]
# ::abstract_map {"10": {"type": "quantity", "span": "30", "ner": "_QUANTITY_10", "value": 30}}
(vv1 / mean-01
      :ARG0 (vv3 / you)
      :mode interrogative)

# ::id 17
# ::snt Yeah  !
# ::tokens ["Yeah", "!"]
# ::lemmas ["yeah", "!"]
# ::pos_tags ["UH", "."]
# ::ner_tags ["O", "O"]
# ::abstract_map {}
(vv1 / yeah
      :mode expressive)

# ::id 18
# ::snt It's easy  .  If you do exercise everyday  ,  you can make it  ,  too  .
# ::tokens ["It", "'s", "easy", ".", "If", "you", "do", "exercise", "everyday", ",", "you", "can", "make-it", ",", "too", "."]
# ::lemmas ["it", "be", "easy", ".", "if", "you", "do", "exercise", "everyday", ",", "you", "can", "make-it", ",", "too", "."]
# ::pos_tags ["PRP", "VBZ", "JJ", ".", "IN", "PRP", "VBP", "NN", "NN", ",", "PRP", "MD", "COMP", ",", "RB", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "0", "O", "O", "O"]
# ::abstract_map {}
(vv1 / multi-sentence
      :snt1 (vv2 / easy-05
            :ARG1 (vv3 / it))
      :snt2 (vv4 / possible-01
            :ARG1 (vv5 / make-02
                  :ARG0 (vv6 / you)
                  :ARG1 (vv7 / exercise-02
                        :ARG0 vv6)
                  :mod (vv9 / too))
            :frequency (vv10 / rate-entity-91
                  :ARG3 (vv11 / temporal-quantity
                        :quant 1
                        :unit (vv13 / day)))))

# ::id 22
# ::snt Can you study with the radio on  ?
# ::tokens ["Can", "you", "study", "with", "the", "radio", "on", "?"]
# ::lemmas ["can", "you", "study", "with", "the", "radio", "on", "?"]
# ::pos_tags ["MD", "PRP", "VB", "IN", "DT", "NN", "IN", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::abstract_map {}
(vv1 / possible-01
      :ARG1 (vv3 / study-01
            :ARG0 (vv4 / you)
            :location (vv5 / radio))
      :mode interrogative)

# ::id 23
# ::snt No  ,  I listen to background music  .
# ::tokens ["No", ",", "I", "listen", "to", "background", "music", "."]
# ::lemmas ["no", ",", "I", "listen", "to", "background", "music", "."]
# ::pos_tags ["UH", ",", "PRP", "VBP", "IN", "NN", "NN", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O"]
# ::abstract_map {}
(vv1 / listen-01
      :ARG0 (vv2 / i)
      :ARG1 (vv3 / music
            :mod (vv4 / background)))

# ::id 24
# ::snt What is the difference  ?
# ::tokens ["What", "is", "the", "difference", "?"]
# ::lemmas ["what", "be", "the", "difference", "?"]
# ::pos_tags ["WP", "VBZ", "DT", "NN", "."]
# ::ner_tags ["O", "O", "O", "O", "O"]
# ::abstract_map {}
(vv1 / differ-02
      :ARG3 (vv2 / amr-unknown))

# ::id 25
# ::snt The radio has too many comerials  .
# ::tokens ["The", "radio", "has", "too", "many", "comerials", "."]
# ::lemmas ["the", "radio", "have", "too", "many", "comerial", "."]
# ::pos_tags ["DT", "NN", "VBZ", "RB", "JJ", "NNS", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::abstract_map {}
(vv1 / have-03
      :ARG0 (vv2 / radio)
      :ARG1 (vv3 / comerial
            :quant (vv4 / many
                  :degree (vv5 / too))))

# ::id 26
# ::snt That's true  ,  but then you have to buy a record player  .
# ::tokens ["That", "'s", "true", ",", "but", "then", "you", "have-to", "buy", "a", "record", "player", "."]
# ::lemmas ["that", "be", "true", ",", "but", "then", "you", "have-to", "buy", "a", "record", "player", "."]
# ::pos_tags ["DT", "VBZ", "JJ", ",", "CC", "RB", "PRP", "COMP", "VB", "DT", "NN", "NN", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "0", "O", "O", "O", "O", "O"]
# ::abstract_map {}
(vv1 / contrast-01
      :ARG1 (vv2 / true-01
            :ARG1 (vv3 / that))
      :ARG2 (vv4 / obligate-01
            :ARG1 (vv5 / you)
            :ARG2 (vv6 / buy-01
                  :ARG0 vv5
                  :ARG1 (vv8 / person
                        :ARG0-of (vv9 / play-01
                              :mod (vv10 / record))))
            :time (vv11 / then)))

# ::id 30
# ::snt Are you all right  ?
# ::tokens ["Are", "you", "all", "right", "?"]
# ::lemmas ["be", "you", "all", "right", "?"]
# ::pos_tags ["VBP", "PRP", "RB", "RB", "."]
# ::ner_tags ["O", "O", "O", "O", "O"]
# ::abstract_map {}
(vv1 / right-06
      :ARG1 (vv3 / you)
      :mod (vv4 / all)
      :mode interrogative)

# ::id 31
# ::snt I will be all right soon  .  I was terrified when I watched them fall from the wire  .
# ::tokens ["I", "will", "be-all", "right", "soon", ".", "I", "was", "terrified", "when", "I", "watched", "them", "fall", "from", "the", "wire", "."]
# ::lemmas ["I", "will", "be-all", "right", "soon", ".", "I", "be", "terrify", "when", "I", "watch", "they", "fall", "from", "the", "wire", "."]
# ::pos_tags ["PRP", "MD", "COMP", "RB", "RB", ".", "PRP", "VBD", "VBN", "WRB", "PRP", "VBD", "PRP", "VB", "IN", "DT", "NN", "."]
# ::ner_tags ["O", "O", "0", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::abstract_map {}
(vv1 / multi-sentence
      :snt1 (vv2 / be-temporally-at-91
            :ARG1 (vv3 / i)
            :ARG2 (vv4 / all)
            :ARG2 (vv5 / soon
                  :mod (vv6 / right)))
      :snt2 (vv7 / terrify-01
            :ARG1 (vv8 / i)
            :time (vv9 / watch-01
                  :ARG0 vv8
                  :ARG1 (vv11 / they)
                  :location (vv12 / wire))))

# ::id 32
# ::snt Don't worry . He is an acrobat 。
# ::tokens ["Do", "n't", "worry", ".", "He", "is", "an", "acrobat", "\u3002"]
# ::lemmas ["do", "not", "worry", ".", "he", "be", "a", "acrobat", "\u3002"]
# ::pos_tags ["VB", "RB", "VB", ".", "PRP", "VBZ", "DT", "NN", "NFP"]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "TITLE", "O"]
# ::abstract_map {}
(vv1 / multi-sentence
      :snt1 (vv2 / worry-02
            :ARG0 (vv4 / you)
            :mode imperative
            :polarity -)
      :snt2 (vv5 / acrobat
            :domain (vv6 / he)))

# ::id 33
# ::snt I see  .
# ::tokens ["I", "see", "."]
# ::lemmas ["I", "see", "."]
# ::pos_tags ["PRP", "VBP", "."]
# ::ner_tags ["O", "O", "O"]
# ::abstract_map {}
(vv1 / see-01
      :ARG0 (vv2 / i))

# ::id 37
# ::snt Hey John  ,  nice skates  .  Are they new  ?
# ::tokens ["Hey", "John", ",", "nice", "skates", ".", "Are", "they", "new", "?"]
# ::lemmas ["hey", "John", ",", "nice", "skate", ".", "be", "they", "new", "?"]
# ::pos_tags ["UH", "NNP", ",", "JJ", "NNS", ".", "VBP", "PRP", "JJ", "."]
# ::ner_tags ["O", "PERSON", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::abstract_map {}
(vv1 / multi-sentence
      :snt1 (vv2 / skate-01
            :ARG1-of (vv3 / nice-01)
            :mod (vv4 / person
                  :ARG0-of (vv5 / have-rel-role-91
                        :ARG1 (vv6 / i)
                        :ARG2 (vv7 / husband))
                  :mod (vv8 / dear)))
      :snt2 (vv9 / new-01
            :ARG1 (vv11 / they)
            :mode interrogative))

# ::id 38
# ::snt Yeah  ,  I just got them  .  I started playing ice hockey in a community league  .  So  ,  I finally got myself new skates  .
# ::tokens ["Yeah", ",", "I", "just", "got", "them", ".", "I", "started", "playing", "ORGANIZATION_1", "hockey", "in", "a", "community", "league", ".", "So", ",", "I", "finally", "got", "myself", "new", "skates", "."]
# ::lemmas ["yeah", ",", "I", "just", "get", "they", ".", "I", "start", "play", "ORGANIZATION_1", "hockey", "in", "a", "community", "league", ".", "so", ",", "I", "finally", "get", "myself", "new", "skate", "."]
# ::pos_tags ["UH", ",", "PRP", "RB", "VBD", "PRP", ".", "PRP", "VBD", "VBG", "NNP", "NN", "IN", "DT", "NN", "NN", ".", "RB", ",", "PRP", "RB", "VBD", "PRP", "JJ", "NNS", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "ORGANIZATION", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::abstract_map {"ORGANIZATION_1": {"type": "named-entity", "span": "ice", "ner": "ORGANIZATION", "ops": "Ice"}}
(vv1 / multi-sentence
      :snt1 (vv2 / get-01
            :ARG0 (vv3 / i)
            :ARG1 (vv4 / they)
            :mod (vv5 / just))
      :snt2 (vv6 / start-01
            :ARG0 (vv7 / i)
            :ARG1 (vv8 / play-01
                  :ARG0 vv7
                  :ARG1 (vv10 / hockey
                        :name (vv11 / name
                              :op1 "Ice"))
                  :time (vv12 / league
                        :mod (vv13 / community))))
      :snt2 (vv14 / get-01
            :ARG0 vv7
            :ARG1 (vv16 / skate-01
                  :ARG1-of (vv17 / new-01)
                  :poss vv7)
            :time (vv19 / final)))

# ::id 39
# ::snt What position do you play  ?
# ::tokens ["What", "position", "do", "you", "play", "?"]
# ::lemmas ["what", "position", "do", "you", "play", "?"]
# ::pos_tags ["WDT", "NN", "VBP", "PRP", "VB", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O"]
# ::abstract_map {}
(vv1 / play-01
      :ARG0 (vv2 / you)
      :ARG1 (vv3 / amr-unknown)
      :purpose (vv4 / position-02))

# ::id 40
# ::snt I'm a defender  .  It's a lot of fun  .  You don't have to be able to skate as fast on defense  .
# ::tokens ["I", "'m", "a", "defender", ".", "It", "'s", "a", "lot", "of", "fun", ".", "You", "do", "n't", "have-to", "be", "able", "to", "skate", "as", "fast", "on", "defense", "."]
# ::lemmas ["I", "be", "a", "defender", ".", "it", "be", "a", "lot", "of", "fun", ".", "you", "do", "not", "have-to", "be", "able", "to", "skate", "as", "fast", "on", "defense", "."]
# ::pos_tags ["PRP", "VBP", "DT", "NN", ".", "PRP", "VBZ", "DT", "NN", "IN", "NN", ".", "PRP", "VBP", "RB", "COMP", "VB", "JJ", "TO", "VB", "RB", "RB", "IN", "NN", "."]
# ::ner_tags ["O", "O", "O", "TITLE", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "0", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::abstract_map {}
(vv1 / multi-sentence
      :snt1 (vv2 / person
            :ARG0-of (vv3 / defend-01)
            :domain (vv4 / i))
      :snt2 (vv5 / fun-01
            :ARG1 (vv6 / it)
            :quant (vv7 / lot))
      :snt3 (vv8 / obligate-01
            :ARG1 (vv9 / you)
            :ARG2 (vv10 / possible-01
                  :ARG1 (vv11 / skate-01
                        :ARG0 vv9
                        :ARG1-of (vv13 / fast-02
                              :degree (vv14 / more))
                        :topic (vv15 / defend-01)))
            :polarity -))

# ::id 41
# ::snt Yeah  ,  you're a pretty big guy  .  I play goalie  ,  myself  .
# ::tokens ["Yeah", ",", "you", "'re", "a", "pretty", "big", "guy", ".", "I", "play", "goalie", ",", "myself", "."]
# ::lemmas ["yeah", ",", "you", "be", "a", "pretty", "big", "guy", ".", "I", "play", "goalie", ",", "myself", "."]
# ::pos_tags ["UH", ",", "PRP", "VBP", "DT", "RB", "JJ", "NN", ".", "PRP", "VBP", "NN", ",", "PRP", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "TITLE", "O", "O", "O"]
# ::abstract_map {}
(vv1 / multi-sentence
      :snt1 (vv2 / guy
            :domain (vv3 / you)
            :mod (vv4 / big
                  :degree (vv5 / pretty)))
      :snt2 (vv6 / play-01
            :ARG0 (vv7 / i)
            :ARG1 (vv8 / goalie)))

# ::id 42
# ::snt Oh  ,  yeah  ?  Which team  ?
# ::tokens ["Oh", ",", "yeah", "?", "Which", "team", "?"]
# ::lemmas ["oh", ",", "yeah", "?", "which", "team", "?"]
# ::pos_tags ["UH", ",", "UH", ".", "WDT", "NN", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::abstract_map {}
(vv1 / multi-sentence
      :snt1 (vv2 / oh
            :mode expressive)
      :snt2 (vv4 / yeah)
      :snt2 (vv5 / amr-unknown
            :domain (vv6 / team
                  :mod (vv7 / amr-unknown))))

# ::id 43
# ::snt The Rockets  .
# ::tokens ["The", "Rockets", "."]
# ::lemmas ["the", "Rockets", "."]
# ::pos_tags ["DT", "NNPS", "."]
# ::ner_tags ["O", "ORGANIZATION", "O"]
# ::abstract_map {}
(vv1 / @@UNKNOWN@@)

# ::id 44
# ::snt Really  ?  I think we play you guys next week  .  Well  ,  I have to go to practice  .  See you later  .
# ::tokens ["Really", "?", "I", "think", "we", "play", "you", "guys", "next", "week", ".", "Well", ",", "I", "have-to", "go", "to", "practice", ".", "See", "you", "later", "."]
# ::lemmas ["really", "?", "I", "think", "we", "play", "you", "guy", "next", "week", ".", "well", ",", "I", "have-to", "go", "to", "practice", ".", "see", "you", "later", "."]
# ::pos_tags ["RB", ",", "PRP", "VBP", "PRP", "VB", "PRP", "NNS", "JJ", "NN", ".", "UH", ",", "PRP", "COMP", "VB", "IN", "NN", ".", "VB", "PRP", "RB", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "DATE", "DATE", "O", "O", "O", "O", "0", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::abstract_map {}
(vv1 / multi-sentence
      :snt1 (vv2 / real-04)
      :snt2 (vv3 / think-01
            :ARG0 (vv4 / i)
            :ARG1 (vv5 / play-01
                  :ARG0 (vv6 / we
                        :mod (vv7 / guy
                              :domain (vv8 / you)))
                  :time (vv9 / week
                        :mod (vv10 / next))))
      :snt2 (vv11 / obligate-01
            :ARG1 (vv13 / i)
            :ARG2 (vv14 / go-02
                  :ARG0 vv13
                  :ARG4 (vv16 / practice-01
                        :ARG0 vv13))
            :mode interrogative)
      :snt3 (vv18 / see-01
            :ARG0 vv13
            :ARG1 (vv20 / you)
            :time (vv21 / late
                  :degree (vv22 / more))))

# ::id 45
# ::snt All right  ,  see you later  .
# ::tokens ["All", "right", ",", "see", "you", "later", "."]
# ::lemmas ["all", "right", ",", "see", "you", "later", "."]
# ::pos_tags ["RB", "RB", ",", "VBP", "PRP", "RB", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::abstract_map {}
(vv1 / see-01
      :ARG0 (vv2 / i)
      :ARG1 (vv3 / you)
      :ARG2-of (vv4 / right-06)
      :mod (vv5 / all)
      :time (vv6 / late
            :degree (vv7 / more)))

# ::id 49
# ::snt Hey Lydia  ,  what are you reading  ?
# ::tokens ["Hey", "Lydia", ",", "what", "are", "you", "reading", "?"]
# ::lemmas ["hey", "Lydia", ",", "what", "be", "you", "read", "?"]
# ::pos_tags ["UH", "NNP", ",", "WP", "VBP", "PRP", "VBG", "."]
# ::ner_tags ["O", "PERSON", "O", "O", "O", "O", "O", "O"]
# ::abstract_map {}
(vv1 / and
      :op1 (vv2 / hey
            :mode expressive)
      :op2 (vv4 / read-01
            :ARG0 (vv5 / you)
            :ARG1 (vv6 / amr-unknown)))

# ::id 50
# ::snt I'm looking at my horoscope for this month  !  My outlook is very positive  .  It says that I should take a vacation to someplace exotic  ,  and that I will have a passionate summer fling  !
# ::tokens ["I", "'m", "looking", "at", "my", "horoscope", "for", "this", "month", "!", "My", "outlook", "is", "very", "positive", ".", "It", "says", "that", "I", "should", "take", "a", "vacation", "to", "someplace", "exotic", ",", "and", "that", "I", "will", "have", "a", "passionate", "summer", "fling", "!"]
# ::lemmas ["I", "be", "look", "at", "my", "horoscope", "for", "this", "month", "!", "my", "outlook", "be", "very", "positive", ".", "it", "say", "that", "I", "should", "take", "a", "vacation", "to", "someplace", "exotic", ",", "and", "that", "I", "will", "have", "a", "passionate", "summer", "fling", "!"]
# ::pos_tags ["PRP", "VBP", "VBG", "IN", "PRP$", "NN", "IN", "DT", "NN", ".", "PRP$", "NN", "VBZ", "RB", "JJ", ".", "PRP", "VBZ", "IN", "PRP", "MD", "VB", "DT", "NN", "IN", "NN", "JJ", ",", "CC", "IN", "PRP", "MD", "VB", "DT", "JJ", "NN", "NN", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "DATE", "DATE", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "DATE", "O", "O"]
# ::abstract_map {}
(vv1 / multi-sentence
      :snt1 (vv2 / look-01
            :ARG0 (vv3 / i)
            :ARG1 (vv4 / horoscope
                  :poss vv3)
            :time (vv6 / month
                  :mod (vv7 / this)))
      :snt2 (vv8 / positive
            :degree (vv9 / very)
            :domain (vv10 / outlook
                  :poss (vv11 / i)))
      :snt2 (vv12 / and
            :op1 (vv13 / say-01
                  :ARG0 (vv14 / it)
                  :ARG1 (vv15 / recommend-01
                        :ARG1 (vv16 / go-02
                              :ARG0 vv11
                              :mod (vv18 / exotic))))
            :op2 (vv20 / have-03
                  :ARG0 vv11
                  :ARG1 (vv22 / fling-01
                        :mod (vv23 / passionate)
                        :mod (vv24 / summer)))))

# ::id 51
# ::snt What are you talking about  ?  Let me see that  .  .  .  What are horoscopes  ?
# ::tokens ["What", "are", "you", "talking", "about", "?", "Let", "me", "see", "that", ".", ".", ".", "What", "are", "horoscopes", "?"]
# ::lemmas ["what", "be", "you", "talk", "about", "?", "let", "I", "see", "that", ".", ".", ".", "what", "be", "horoscope", "?"]
# ::pos_tags ["WP", "VBP", "PRP", "VBG", "IN", ".", "VB", "PRP", "VB", "DT", ".", ".", ".", "WP", "VBP", "NNS", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::abstract_map {}
(vv1 / multi-sentence
      :snt1 (vv2 / talk-01
            :ARG0 (vv3 / you)
            :ARG1 (vv4 / amr-unknown))
      :snt2 (vv5 / let-01
            :ARG0 (vv6 / i)
            :ARG1 (vv7 / see-01
                  :ARG0 (vv8 / i)
                  :ARG1 (vv9 / that)))
      :snt3 (vv10 / horoscope
            :domain (vv11 / amr-unknown)))

# ::id 52
# ::snt It's a prediction of your month  ,  based on your zodiac sign  .  You have a different sign for the month and date you were born in  .  I was born on April 15th  ,  so I'm an Aries  .  When were you born  ?
# ::tokens ["It", "'s", "a", "prediction", "of", "your", "month", ",", "based", "on", "your", "zodiac", "sign", ".", "You", "have", "a", "different", "sign", "for", "the", "month", "and", "date", "you", "were", "born", "in", ".", "I", "was", "born", "on", "April", "ORDINAL_ENTITY_1", ",", "so", "I", "'m", "an", "Aries", ".", "When", "were", "you", "born", "?"]
# ::lemmas ["it", "be", "a", "prediction", "of", "you", "month", ",", "base", "on", "you", "zodiac", "sign", ".", "you", "have", "a", "different", "sign", "for", "the", "month", "and", "date", "you", "be", "bear", "in", ".", "I", "be", "bear", "on", "April", "ORDINAL_ENTITY_1", ",", "so", "I", "be", "a", "Aries", ".", "when", "be", "you", "bear", "?"]
# ::pos_tags ["PRP", "VBZ", "DT", "NN", "IN", "PRP$", "NN", ",", "VBN", "IN", "PRP$", "NN", "NN", ".", "PRP", "VBP", "DT", "JJ", "NN", "IN", "DT", "NN", "CC", "NN", "PRP", "VBD", "VBN", "IN", ".", "PRP", "VBD", "VBN", "IN", "NNP", "JJ", ",", "RB", "PRP", "VBP", "DT", "NNP", ".", "WRB", "VBD", "PRP", "VBN", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "DURATION", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "DATE", "DATE", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "DATE", "ORDINAL_ENTITY", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::abstract_map {"ORDINAL_ENTITY_1": {"type": "ordinal-entity", "span": "15th", "ner": "ORDINAL_ENTITY", "ops": ["15"]}}
(vv1 / multi-sentence
      :snt1 (vv2 / predict-01
            :ARG0 (vv3 / you)
            :ARG1-of (vv6 / base-02
                  :ARG2 (vv7 / sign
                        :mod (vv8 / zodiac)
                        :poss vv3))
            :time (vv4 / month
                  :time-of (vv5 / it)))
      :snt2 (vv10 / have-03
            :ARG0 (vv11 / you)
            :ARG1 (vv12 / sign
                  :ARG1-of (vv13 / differ-02)
                  :topic (vv14 / and
                        :op1 (vv15 / month)
                        :op2 (vv16 / date
                              :time-of (vv17 / bear-02
                                    :ARG1 vv3)))))
      :snt3 (vv19 / bear-02
            :ARG1 vv3
            :name (vv21 / April)
            :ord (vv22 / ordinal-entity
                  :value 15))
      :snt4 (vv23 / bear-02
            :ARG1 vv3
            :time (vv25 / amr-unknown)))

# ::id 53
# ::snt January 5th  .
# ::tokens ["January", "ORDINAL_ENTITY_1", "."]
# ::lemmas ["January", "ORDINAL_ENTITY_1", "."]
# ::pos_tags ["NNP", "JJ", "."]
# ::ner_tags ["DATE", "ORDINAL_ENTITY", "O"]
# ::abstract_map {"ORDINAL_ENTITY_1": {"type": "ordinal-entity", "span": "5th", "ner": "ORDINAL_ENTITY", "ops": ["5"]}}
(vv1 / @@UNKNOWN@@
      :ord (vv2 / ordinal-entity
            :value 5))

# ::id 54
# ::snt Let's see  .   .   .  you're a Capricorn  .  It says that you will be feeling stress at work  ,  but you could see new  ,  exciting developments in your love life  .  Looks like we'll both have interesting summers  !
# ::tokens ["Let", "'s", "see", ".", ".", ".", "you", "'re", "a", "Capricorn", ".", "It", "says", "that", "you", "will", "be", "feeling", "stress", "at", "work", ",", "but", "you", "could", "see", "new", ",", "exciting", "developments", "in", "your", "love", "life", ".", "Looks", "like", "we", "'ll", "both", "have", "interesting", "summers", "!"]
# ::lemmas ["let", "'s", "see", ".", ".", ".", "you", "be", "a", "Capricorn", ".", "it", "say", "that", "you", "will", "be", "feel", "stress", "at", "work", ",", "but", "you", "could", "see", "new", ",", "exciting", "development", "in", "you", "love", "life", ".", "look", "like", "we", "will", "both", "have", "interesting", "summer", "!"]
# ::pos_tags ["VB", "PRP", "VB", ".", ".", ".", "PRP", "VBP", "DT", "NNP", ".", "PRP", "VBZ", "IN", "PRP", "MD", "VB", "VBG", "NN", "IN", "NN", ",", "CC", "PRP", "MD", "VB", "JJ", ",", "JJ", "NNS", "IN", "PRP$", "NN", "NN", ".", "VBZ", "IN", "PRP", "MD", "DT", "VB", "JJ", "NNS", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "SET", "O"]
# ::abstract_map {}
(vv1 / multi-sentence
      :snt1 (vv2 / see-01
            :ARG0 (vv4 / we)
            :mode imperative)
      :snt2 (vv5 / contrast-01
            :ARG1 (vv6 / nice-01
                  :ARG1 (vv7 / you))
            :ARG2 (vv8 / say-01
                  :ARG0 (vv9 / it)
                  :ARG1 (vv10 / feel-01
                        :ARG0 (vv11 / you)
                        :ARG1 (vv12 / stress-02
                              :ARG1 vv11
                              :ARG1 (vv14 / work-01)))))
      :snt2 (vv15 / possible-01
            :ARG1 (vv16 / see-01
                  :ARG0 vv11
                  :ARG1 (vv18 / develop-01
                        :ARG1-of (vv19 / new-01)
                        :ARG2 (vv20 / life
                              :ARG1-of (vv21 / love-01
                                    :ARG0 vv11)))))
      :snt3 (vv23 / contrast-01
            :ARG2 (vv24 / possible-01
                  :ARG1 (vv25 / see-01
                        :ARG0 vv11
                        :ARG1 (vv27 / develop-01
                              :ARG1-of (vv28 / new-01)
                              :ARG2 (vv29 / life
                                    :ARG1-of (vv30 / love-01
                                          :ARG0 vv11))))))
      :snt3 (vv32 / look-02
            :ARG0 vv11
            :ARG1 (vv34 / interest-01
                  :ARG1 vv11
                  :mod (vv36 / both)
                  :time (vv37 / date-entity
                        :mod (vv38 / year
                              :mod (vv39 / both))))))

# ::id 55
# ::snt That's bogus  .  I don't feel any stress at work  ,  and my love life is practically nonexistent  .  This zodiac stuff is all a bunch of nonsense  .
# ::tokens ["That", "'s", "bogus", ".", "I", "do", "n't", "feel", "any", "stress", "at", "work", ",", "and", "my", "love", "life", "is", "practically", "nonexistent", ".", "This", "zodiac", "stuff", "is-all", "a", "bunch", "of", "nonsense", "."]
# ::lemmas ["that", "be", "bogus", ".", "I", "do", "not", "feel", "any", "stress", "at", "work", ",", "and", "my", "love", "life", "be", "practically", "nonexistent", ".", "this", "zodiac", "stuff", "be-all", "a", "bunch", "of", "nonsense", "."]
# ::pos_tags ["DT", "VBZ", "JJ", ".", "PRP", "VBP", "RB", "VB", "DT", "NN", "IN", "NN", ",", "CC", "PRP$", "NN", "NN", "VBZ", "RB", "JJ", ".", "DT", "NN", "NN", "COMP", "DT", "NN", "IN", "NN", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "0", "O", "O", "O", "O", "O"]
# ::abstract_map {}
(vv1 / multi-sentence
      :snt1 (vv2 / bogus
            :domain (vv3 / that))
      :snt2 (vv4 / and
            :op1 (vv5 / feel-01
                  :ARG0 (vv6 / i)
                  :ARG1 (vv7 / stress-02
                        :ARG1 vv6
                        :manner (vv9 / work-01)
                        :mod (vv10 / any))
                  :polarity -)
            :op2 (vv11 / nonexistent
                  :domain (vv12 / life
                        :mod (vv13 / love-01)
                        :poss vv6)
                  :mod (vv15 / practical)))
      :snt3 (vv16 / sense-02
            :ARG1 (vv17 / stuff
                  :mod (vv18 / zodiac)
                  :mod (vv19 / this)
                  :quant (vv20 / bunch))
            :polarity -))

# ::id 56
# ::snt No  ,  it's not  ,  your astrology sign can tell you a lot about your personality  .  See  ?  It says that an Aries is energetic and loves to socialize  .
# ::tokens ["No", ",", "it", "'s", "not", ",", "your", "astrology", "sign", "can", "tell", "you", "a", "lot", "about", "your", "personality", ".", "See", "?", "It", "says", "that", "an", "Aries", "is", "energetic", "and", "loves", "to", "socialize", "."]
# ::lemmas ["no", ",", "it", "be", "not", ",", "you", "astrology", "sign", "can", "tell", "you", "a", "lot", "about", "you", "personality", ".", "see", "?", "it", "say", "that", "a", "Aries", "be", "energetic", "and", "love", "to", "socialize", "."]
# ::pos_tags ["UH", ",", "PRP", "VBZ", "RB", ",", "PRP$", "NN", "NN", "MD", "VB", "PRP", "DT", "NN", "IN", "PRP$", "NN", ".", "VB", ".", "PRP", "VBZ", "IN", "DT", "NNP", "VBZ", "JJ", "CC", "VBZ", "TO", "VB", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "MISC", "O", "O", "O", "O", "O", "O", "O"]
# ::abstract_map {}
(vv1 / multi-sentence
      :snt1 (vv2 / contrast-01
            :ARG2 (vv3 / possible-01
                  :ARG1 (vv4 / tell-01
                        :ARG0 (vv5 / sign
                              :mod (vv6 / astrology)
                              :poss (vv7 / you))
                        :ARG1 (vv8 / personality
                              :quant (vv9 / lot))
                        :ARG2 vv7)))
      :snt2 (vv11 / see-01
            :ARG0 (vv13 / you)
            :ARG1 (vv14 / and
                  :op1 (vv15 / develop-01
                        :ARG1 (vv16 / person
                              :ARG0-of (vv17 / demonstrate-01)))
                  :op2 (vv18 / love-01
                        :ARG0 vv16
                        :ARG1 (vv20 / socialize-02
                              :ARG1 vv16)))
            :mode imperative))

# ::id 57
# ::snt Well  ,  you certainly match those criteria  ,  but they're so broad they could apply to anyone  .  What does it say about me  ?
# ::tokens ["Well", ",", "you", "certainly", "match", "those", "criteria", ",", "but", "they", "'re", "so", "broad", "they", "could", "apply", "to", "anyone", ".", "What", "does", "it", "say", "about", "me", "?"]
# ::lemmas ["well", ",", "you", "certainly", "match", "those", "criterion", ",", "but", "they", "be", "so", "broad", "they", "could", "apply", "to", "anyone", ".", "what", "do", "it", "say", "about", "I", "?"]
# ::pos_tags ["UH", ",", "PRP", "RB", "VBP", "DT", "NNS", ",", "CC", "PRP", "VBP", "RB", "JJ", "PRP", "MD", "VB", "IN", "NN", ".", "WP", "VBZ", "PRP", "VB", "IN", "PRP", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::abstract_map {}
(vv1 / multi-sentence
      :snt1 (vv2 / have-concession-91
            :ARG1 (vv3 / match-01
                  :ARG0 (vv4 / you)
                  :ARG2 (vv5 / criteria
                        :mod (vv6 / that))
                  :mod (vv7 / certain)))
      :snt2 (vv8 / possible-01
            :ARG1 (vv9 / apply-02
                  :ARG0 vv4
                  :ARG1-of (vv12 / significant-02
                        :degree (vv13 / so))
                  :ARG2 (vv11 / anyone)))
      :snt2 (vv14 / say-01
            :ARG0 (vv15 / it)
            :ARG1 (vv16 / i)
            :manner (vv17 / amr-unknown)))

# ::id 58
# ::snt A Capricorn is serious-minded and practical  .  She likes to do things in conventional ways  .  That sounds just like you  !
# ::tokens ["A", "Capricorn", "is", "serious", "-", "minded", "and", "practical", ".", "She", "likes", "to", "do", "things", "in", "conventional", "ways", ".", "That", "sounds", "just", "like", "you", "!"]
# ::lemmas ["a", "Capricorn", "be", "serious", "-", "minded", "and", "practical", ".", "she", "like", "to", "do", "thing", "in", "conventional", "way", ".", "that", "sound", "just", "like", "you", "!"]
# ::pos_tags ["DT", "NNP", "VBZ", "JJ", "HYPH", "JJ", "CC", "JJ", ".", "PRP", "VBZ", "TO", "VB", "NNS", "IN", "JJ", "NNS", ".", "DT", "VBZ", "RB", "IN", "PRP", "."]
# ::ner_tags ["O", "MISC", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::abstract_map {}
(vv1 / multi-sentence
      :snt1 (vv2 / and
            :op1 (vv3 / minded
                  :ARG1-of (vv4 / serious-02))
            :op2 (vv5 / practical))
      :snt2 (vv7 / like-01
            :ARG0 (vv8 / she)
            :ARG1 (vv9 / do-02
                  :ARG0 vv8
                  :ARG1 (vv11 / thing)
                  :manner (vv12 / way
                        :mod (vv13 / conventional))))
      :snt3 (vv14 / sound-01
            :ARG1 (vv15 / that)
            :ARG2 (vv16 / resemble-01
                  :ARG2 (vv17 / you))
            :mod (vv18 / just)))

# ::id 62
# ::snt Frank's getting married  ,  do you believe this  ?
# ::tokens ["PERSON_1", "'s", "getting", "married", ",", "do", "you", "believe", "this", "?"]
# ::lemmas ["PERSON_1", "'s", "get", "married", ",", "do", "you", "believe", "this", "?"]
# ::pos_tags ["NNP", "POS", "VBG", "JJ", ",", "VBP", "PRP", "VB", "DT", "."]
# ::ner_tags ["PERSON", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::abstract_map {"PERSON_1": {"type": "named-entity", "span": "Frank", "ner": "PERSON", "ops": "Frank"}}
(vv1 / and
      :op1 (vv2 / get-02
            :ARG0 (vv3 / person
                  :name (vv4 / name
                        :op1 "Frank"))
            :ARG1 (vv5 / marry-01))
      :op2 (vv6 / believe-01
            :ARG0 (vv8 / you)
            :ARG1 (vv9 / this)
            :mode interrogative))

# ::id 63
# ::snt Is he really  ?
# ::tokens ["Is", "he", "really", "?"]
# ::lemmas ["be", "he", "really", "?"]
# ::pos_tags ["VBZ", "PRP", "RB", "."]
# ::ner_tags ["O", "O", "O", "O"]
# ::abstract_map {}
(vv1 / real-04
      :ARG1 (vv3 / he)
      :mode interrogative)

# ::id 64
# ::snt Yes  ,  he is  .  He loves the girl very much  .
# ::tokens ["Yes", ",", "he", "is", ".", "He", "loves", "the", "girl", "very", "much", "."]
# ::lemmas ["yes", ",", "he", "be", ".", "he", "love", "the", "girl", "very", "much", "."]
# ::pos_tags ["UH", ",", "PRP", "VBZ", ".", "PRP", "VBZ", "DT", "NN", "RB", "RB", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::abstract_map {}
(vv1 / multi-sentence
      :snt1 (vv2 / he)
      :snt2 (vv3 / love-01
            :ARG0 (vv4 / he)
            :ARG1 (vv5 / girl)
            :mod (vv6 / much
                  :degree (vv7 / very))))

# ::id 65
# ::snt Who is he marring  ?
# ::tokens ["Who", "is", "he", "marring", "?"]
# ::lemmas ["who", "be", "he", "mar", "?"]
# ::pos_tags ["WP", "VBZ", "PRP", "VBG", "."]
# ::ner_tags ["O", "O", "O", "O", "O"]
# ::abstract_map {}
(vv1 / mar-01
      :ARG0 (vv2 / he)
      :ARG1 (vv3 / amr-unknown))

# ::id 66
# ::snt A girl he met on holiday in Spain  ,  I think  .
# ::tokens ["A", "girl", "he", "met", "on", "holiday", "in", "COUNTRY_1", ",", "I", "think", "."]
# ::lemmas ["a", "girl", "he", "meet", "on", "holiday", "in", "COUNTRY_1", ",", "I", "think", "."]
# ::pos_tags ["DT", "NN", "PRP", "VBD", "IN", "NN", "IN", "NNP", ",", "PRP", "VBP", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "COUNTRY", "O", "O", "O", "O"]
# ::abstract_map {"COUNTRY_1": {"type": "named-entity", "span": "Spain", "ner": "COUNTRY", "ops": "Spain"}}
(vv1 / think-01
      :ARG0 (vv2 / i)
      :ARG1 (vv3 / meet-02
            :ARG0 (vv4 / he)
            :ARG1 (vv5 / girl
                  :ARG1-of (vv6 / meet-02
                        :ARG0 vv4
                        :location (vv8 / country
                              :name (vv9 / name
                                    :op1 "Spain"))))))

# ::id 67
# ::snt Have they set a date for the wedding  ?
# ::tokens ["Have", "they", "set", "a", "date", "for", "the", "wedding", "?"]
# ::lemmas ["have", "they", "set", "a", "date", "for", "the", "wedding", "?"]
# ::pos_tags ["VBP", "PRP", "VBD", "DT", "NN", "IN", "DT", "NN", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::abstract_map {}
(vv1 / set-02
      :ARG0 (vv3 / they)
      :ARG1 (vv4 / date
            :purpose (vv5 / rate))
      :mode interrogative)

# ::id 68
# ::snt Not yet  .
# ::tokens ["Not", "yet", "."]
# ::lemmas ["not", "yet", "."]
# ::pos_tags ["RB", "RB", "."]
# ::ner_tags ["O", "O", "O"]
# ::abstract_map {}
(vv1 / have-polarity-91
      :time (vv2 / yet))

# ::id 72
# ::snt I hear you bought a new house in the northern suburbs  .
# ::tokens ["I", "hear", "you", "bought", "a", "new", "house", "in", "the", "northern", "suburbs", "."]
# ::lemmas ["I", "hear", "you", "buy", "a", "new", "house", "in", "the", "northern", "suburb", "."]
# ::pos_tags ["PRP", "VBP", "PRP", "VBD", "DT", "JJ", "NN", "IN", "DT", "JJ", "NNS", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::abstract_map {}
(vv1 / hear-01
      :ARG0 (vv2 / i)
      :ARG1 (vv3 / buy-01
            :ARG0 (vv4 / you)
            :ARG1 (vv5 / house
                  :ARG1-of (vv6 / new-01))
            :location (vv7 / suburb
                  :mod (vv8 / sand))))

# ::id 73
# ::snt That's right  ,  we bought it the same day we came on the market  .
# ::tokens ["That", "'s", "right", ",", "we", "bought", "it", "the", "same", "day", "we", "came-on", "the", "market", "."]
# ::lemmas ["that", "be", "right", ",", "we", "buy", "it", "the", "same", "day", "we", "come-on", "the", "market", "."]
# ::pos_tags ["DT", "VBZ", "JJ", ",", "PRP", "VBD", "PRP", "DT", "JJ", "NN", "PRP", "COMP", "DT", "NN", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "DATE", "DATE", "DATE", "O", "0", "O", "O", "O"]
# ::abstract_map {}
(vv1 / right-06
      :ARG2 (vv2 / buy-01
            :ARG0 (vv3 / we)
            :ARG1 (vv4 / it)
            :time (vv5 / come-01
                  :ARG1 vv3
                  :ARG4 (vv7 / market))
            :time (vv8 / day
                  :ARG1-of (vv9 / same-01)))
      :ARG2 (vv10 / that))

# ::id 74
# ::snt What kind of house is it  ?
# ::tokens ["What", "kind-of", "house", "is", "it", "?"]
# ::lemmas ["what", "kind-of", "house", "be", "it", "?"]
# ::pos_tags ["WDT", "COMP", "NN", "VBZ", "PRP", "."]
# ::ner_tags ["O", "0", "O", "O", "O", "O"]
# ::abstract_map {}
(vv1 / amr-unknown
      :domain (vv2 / house
            :mod (vv3 / kind
                  :mod (vv4 / amr-unknown))))

# ::id 75
# ::snt It's a wonderful Spanish style  .
# ::tokens ["It", "'s", "a", "wonderful", "NATIONALITY_1", "style", "."]
# ::lemmas ["it", "be", "a", "wonderful", "NATIONALITY_1", "style", "."]
# ::pos_tags ["PRP", "VBZ", "DT", "JJ", "NNP", "NN", "."]
# ::ner_tags ["O", "O", "O", "O", "NATIONALITY", "O", "O"]
# ::abstract_map {"NATIONALITY_1": {"type": "named-entity", "span": "Spanish", "ner": "NATIONALITY", "ops": "Spain"}}
(vv1 / style
      :ARG1-of (vv2 / wonderful-03)
      :domain (vv3 / it)
      :mod (vv4 / country
            :name (vv5 / name
                  :op1 "Spain")))

# ::id 76
# ::snt Oh  ,  I love the roof tiles on Spanish style houses  .
# ::tokens ["Oh", ",", "I", "love", "the", "roof", "tiles", "on", "NATIONALITY_1", "style", "houses", "."]
# ::lemmas ["oh", ",", "I", "love", "the", "roof", "tile", "on", "NATIONALITY_1", "style", "house", "."]
# ::pos_tags ["UH", ",", "PRP", "VBP", "DT", "NN", "NNS", "IN", "NNP", "NN", "NNS", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "NATIONALITY", "O", "O", "O"]
# ::abstract_map {"NATIONALITY_1": {"type": "named-entity", "span": "Spanish", "ner": "NATIONALITY", "ops": "Spain"}}
(vv1 / love-01
      :ARG0 (vv2 / i)
      :ARG1 (vv3 / tile-01
            :location (vv4 / house
                  :mod (vv5 / style)
                  :mod (vv6 / country
                        :name (vv7 / name
                              :op1 "Spain")))
            :mod (vv8 / roof))
      :mod (vv9 / oh
            :mode expressive))

# ::id 77
# ::snt And it's a bargaining  .  A house like this in river side costs double the price  .
# ::tokens ["And", "it", "'s", "a", "bargaining", ".", "A", "house", "like", "this", "in", "river", "side", "costs", "double", "the", "price", "."]
# ::lemmas ["and", "it", "be", "a", "bargaining", ".", "a", "house", "like", "this", "in", "river", "side", "cost", "double", "the", "price", "."]
# ::pos_tags ["CC", "PRP", "VBZ", "DT", "NN", ".", "DT", "NN", "IN", "DT", "IN", "NN", "NN", "VBZ", "PDT", "DT", "NN", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "TITLE", "O", "O", "O", "O", "O", "O"]
# ::abstract_map {}
(vv1 / multi-sentence
      :snt1 (vv2 / and
            :op2 (vv3 / collapse-01
                  :ARG1 (vv4 / it)))
      :snt2 (vv5 / cost-01
            :ARG1 (vv6 / house
                  :ARG1-of (vv7 / resemble-01
                        :ARG2 (vv8 / this))
                  :location (vv9 / side
                        :mod (vv10 / river)))
            :ARG2 (vv11 / price-01
                  :mod (vv12 / double))))

# ::id 78
# ::snt Great  ,  is it a two bedroom house  ?
# ::tokens ["Great", ",", "is", "it", "a", "1", "bedroom", "house", "?"]
# ::lemmas ["Great", ",", "be", "it", "a", "1", "bedroom", "house", "?"]
# ::pos_tags ["NNP", ",", "VBZ", "PRP", "DT", "CD", "NN", "NN", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "NUMBER", "O", "O", "O"]
# ::abstract_map {"1": {"type": "quantity", "span": "two", "ner": "_QUANTITY_1", "value": 2}}
(vv1 / be-located-at-91
      :ARG1 (vv2 / house
            :mod (vv3 / bedroom
                  :quant 2))
      :ARG1-of (vv5 / request-confirmation-91)
      :mod (vv6 / great))

# ::id 79
# ::snt No  ,  it has three bedrooms and three beds  ,  and has a living room with a twelve-foot ceiling  .  There's a two-car garage  .
# ::tokens ["No", ",", "it", "has", "1", "bedrooms", "and", "2", "beds", ",", "and", "has", "a", "living", "room", "with", "a", "twelve", "-", "foot", "ceiling", ".", "There", "'s", "a", "3", "-", "car", "garage", "."]
# ::lemmas ["no", ",", "it", "have", "1", "bedroom", "and", "2", "bed", ",", "and", "have", "a", "living", "room", "with", "a", "twelve", "-", "foot", "ceiling", ".", "there", "be", "a", "3", "-", "car", "garage", "."]
# ::pos_tags ["UH", ",", "PRP", "VBZ", "CD", "NNS", "CC", "CD", "NNS", ",", "CC", "VBZ", "DT", "NN", "NN", "IN", "DT", "CD", "HYPH", "NN", "NN", ".", "EX", "VBZ", "DT", "CD", "HYPH", "NN", "NN", "."]
# ::ner_tags ["O", "O", "O", "O", "NUMBER", "O", "O", "NUMBER", "O", "O", "O", "O", "O", "O", "O", "O", "O", "NUMBER", "NUMBER", "NUMBER", "O", "O", "O", "O", "O", "NUMBER", "NUMBER", "NUMBER", "O", "O"]
# ::abstract_map {"1": {"type": "quantity", "span": "three", "ner": "_QUANTITY_1", "value": 3}, "2": {"type": "quantity", "span": "three", "ner": "_QUANTITY_1", "value": 3}, "3": {"type": "quantity", "span": "two", "ner": "_QUANTITY_1", "value": 2}}
(vv1 / multi-sentence
      :snt1 (vv2 / and
            :op1 (vv3 / have-03
                  :ARG0 (vv4 / it)
                  :ARG1 (vv5 / and
                        :op1 (vv6 / bedroom
                              :quant 2)
                        :op2 (vv8 / bed
                              :quant 2)))
            :op2 (vv10 / have-03
                  :ARG0 vv4
                  :ARG1 (vv12 / room
                        :location-of (vv13 / live-01)
                        :mod (vv14 / ceiling
                              :mod (vv15 / east)
                              :mod (vv16 / garage)))))
      :snt2 (vv17 / garage)
      :snt2 (vv18 / car
            :quant 2))

# ::id 80
# ::snt That's a nice area too  .  It'll be a good investment for you  .
# ::tokens ["That", "'s", "a", "nice", "area", "too", ".", "It", "'ll", "be", "a", "good", "investment", "for", "you", "."]
# ::lemmas ["that", "be", "a", "nice", "area", "too", ".", "it", "will", "be", "a", "good", "investment", "for", "you", "."]
# ::pos_tags ["DT", "VBZ", "DT", "JJ", "NN", "RB", ".", "PRP", "MD", "VB", "DT", "JJ", "NN", "IN", "PRP", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::abstract_map {}
(vv1 / multi-sentence
      :snt1 (vv2 / area
            :ARG1-of (vv3 / nice-01)
            :domain (vv4 / that)
            :mod (vv5 / too))
      :snt2 (vv6 / invest-01
            :ARG0 (vv7 / you)
            :ARG1-of (vv8 / good-02
                  :degree (vv9 / most))))

# ::id 81
# ::snt Yeas  ,  when will you buy a house  ?
# ::tokens ["Yeas", ",", "when", "will", "you", "buy", "a", "house", "?"]
# ::lemmas ["Yeas", ",", "when", "will", "you", "buy", "a", "house", "?"]
# ::pos_tags ["NNP", ",", "WRB", "MD", "PRP", "VB", "DT", "NN", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::abstract_map {}
(vv1 / buy-01
      :ARG0 (vv2 / you)
      :ARG1 (vv3 / house)
      :time (vv4 / amr-unknown))

# ::id 82
# ::snt Not untill the end of this year  ,  you know  ,  just before my wedding  .
# ::tokens ["Not", "untill", "the", "end", "of", "this", "year", ",", "you", "know", ",", "just", "before", "my", "wedding", "."]
# ::lemmas ["not", "untill", "the", "end", "of", "this", "year", ",", "you", "know", ",", "just", "before", "my", "wedding", "."]
# ::pos_tags ["RB", "IN", "DT", "NN", "IN", "DT", "NN", ",", "PRP", "VBP", ",", "RB", "IN", "PRP$", "NN", "."]
# ::ner_tags ["O", "O", "DATE", "DATE", "DATE", "DATE", "DATE", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::abstract_map {}
(vv1 / know-01
      :ARG0 (vv2 / you)
      :ARG1 (vv3 / be-temporally-at-91
            :ARG2 (vv4 / before
                  :mod (vv5 / just)
                  :op1 (vv6 / end-01
                        :ARG1 (vv7 / year
                              :mod (vv8 / this))
                        :polarity -))))

# ::id 83
# ::snt Right  ,  congratulations  .
# ::tokens ["Right", ",", "congratulations", "."]
# ::lemmas ["right", ",", "congratulation", "."]
# ::pos_tags ["UH", ",", "NNS", "."]
# ::ner_tags ["O", "O", "O", "O"]
# ::abstract_map {}
(vv1 / congratulate-01
      :ARG0 (vv2 / i)
      :ARG1 (vv3 / you))

# ::id 84
# ::snt Thank you  .
# ::tokens ["Thank", "you", "."]
# ::lemmas ["thank", "you", "."]
# ::pos_tags ["VBP", "PRP", "."]
# ::ner_tags ["O", "O", "O"]
# ::abstract_map {}
(vv1 / thank-01
      :ARG1 (vv2 / you))

# ::id 88
# ::snt Hi  ,  Becky  ,  what's up  ?
# ::tokens ["Hi", ",", "Becky", ",", "what", "'s", "up", "?"]
# ::lemmas ["hi", ",", "Becky", ",", "what", "be", "up", "?"]
# ::pos_tags ["UH", ",", "NNP", ",", "WP", "VBZ", "RB", "."]
# ::ner_tags ["O", "O", "PERSON", "O", "O", "O", "O", "O"]
# ::abstract_map {}
(vv1 / and
      :op1 (vv2 / hi)
      :op2 (vv3 / say-01
            :ARG0 (vv4 / i)
            :ARG1 (vv5 / hi)
            :ARG1 (vv6 / amr-unknown)))

# ::id 89
# ::snt Not much  ,  except that my mother-in-law is driving me up the wall  .
# ::tokens ["Not", "much", ",", "except", "that", "my", "mother", "-", "in", "-", "law", "is", "driving", "me", "up", "the", "wall", "."]
# ::lemmas ["not", "much", ",", "except", "that", "my", "mother", "-", "in", "-", "law", "be", "drive", "I", "up", "the", "wall", "."]
# ::pos_tags ["RB", "RB", ",", "IN", "IN", "PRP$", "NN", "HYPH", "IN", "HYPH", "NN", "VBZ", "VBG", "PRP", "IN", "DT", "NN", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::abstract_map {}
(vv1 / cause-01
      :ARG0 (vv2 / drive-02
            :ARG0 (vv3 / person
                  :ARG0-of (vv4 / have-rel-role-91
                        :ARG1 (vv5 / i)
                        :ARG2 (vv6 / mother
                              :polarity -)))
            :ARG1 vv5
            :degree (vv10 / much)
            :direction (vv8 / up
                  :op1 (vv9 / wall))))

# ::id 90
# ::snt What's the problem  ?
# ::tokens ["What", "'s", "the", "problem", "?"]
# ::lemmas ["what", "be", "the", "problem", "?"]
# ::pos_tags ["WP", "VBZ", "DT", "NN", "."]
# ::ner_tags ["O", "O", "O", "O", "O"]
# ::abstract_map {}
(vv1 / problem
      :domain (vv2 / amr-unknown))

# ::id 91
# ::snt She loves to nit-pick and criticizes everything that I do  .  I can never do anything right when she's around  .
# ::tokens ["She", "loves", "to", "nit", "-", "pick", "and", "criticizes", "everything", "that", "I", "do", ".", "I", "can", "never", "do", "anything", "right", "when", "she", "'s", "around", "."]
# ::lemmas ["she", "love", "to", "nit", "-", "pick", "and", "criticize", "everything", "that", "I", "do", ".", "I", "can", "never", "do", "anything", "right", "when", "she", "be", "around", "."]
# ::pos_tags ["PRP", "VBZ", "IN", "NN", "HYPH", "NN", "CC", "VBZ", "NN", "WDT", "PRP", "VBP", ".", "PRP", "MD", "RB", "VB", "NN", "JJ", "WRB", "PRP", "VBZ", "RB", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::abstract_map {}
(vv1 / multi-sentence
      :snt1 (vv2 / love-01
            :ARG0 (vv3 / she)
            :ARG1 (vv4 / and
                  :op1 (vv5 / pick-01
                        :ARG0 vv3
                        :ARG1 (vv7 / everything
                              :ARG1-of (vv8 / do-02
                                    :ARG0 vv3)))
                  :op2 (vv10 / criticize-01
                        :ARG0 vv3
                        :ARG1 (vv12 / everything))))
      :snt2 (vv13 / possible-01
            :ARG1 (vv14 / do-02
                  :ARG0 vv3
                  :ARG1 (vv16 / anything)
                  :ARG2-of (vv17 / right-06)
                  :time (vv18 / ever))
            :polarity -)
      :snt3 (vv19 / be-located-at-91
            :ARG1 (vv20 / she)
            :ARG2 (vv21 / around)))

# ::id 92
# ::snt For example  ?
# ::tokens ["For", "example", "?"]
# ::lemmas ["for", "example", "?"]
# ::pos_tags ["IN", "NN", "."]
# ::ner_tags ["O", "O", "O"]
# ::abstract_map {}
(vv1 / exemplify-01
      :ARG0 (vv2 / amr-unknown))

# ::id 93
# ::snt Well  ,  last week I invited her over to dinner  .  My husband and I had no problem with the food  ,  but if you listened to her  ,  then it would seem like I fed her old meat and rotten vegetables  .  There's just nothing can please her  .
# ::tokens ["Well", ",", "last", "week", "I", "invited", "her", "over", "to", "dinner", ".", "My", "husband", "and", "I", "had", "no", "problem", "with", "the", "food", ",", "but", "if", "you", "listened", "to", "her", ",", "then", "it", "would", "seem", "like", "I", "fed", "her", "old", "meat", "and", "rotten", "vegetables", ".", "There", "'s", "just", "nothing", "can", "please", "her", "."]
# ::lemmas ["well", ",", "last", "week", "I", "invite", "she", "over", "to", "dinner", ".", "my", "husband", "and", "I", "have", "no", "problem", "with", "the", "food", ",", "but", "if", "you", "listen", "to", "she", ",", "then", "it", "would", "seem", "like", "I", "feed", "she", "old", "meat", "and", "rotten", "vegetable", ".", "there", "be", "just", "nothing", "can", "please", "she", "."]
# ::pos_tags ["UH", ",", "JJ", "NN", "PRP", "VBD", "PRP$", "IN", "IN", "NN", ".", "PRP$", "NN", "CC", "PRP", "VBD", "DT", "NN", "IN", "DT", "NN", ",", "CC", "IN", "PRP", "VBD", "IN", "PRP", ",", "RB", "PRP", "MD", "VB", "IN", "PRP", "VBD", "PRP$", "JJ", "NN", "CC", "JJ", "NNS", ".", "EX", "VBZ", "RB", "NN", "MD", "VB", "PRP", "."]
# ::ner_tags ["O", "O", "DATE", "DATE", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::abstract_map {}
(vv1 / multi-sentence
      :snt1 (vv2 / invite-01
            :ARG0 (vv3 / i)
            :ARG1 (vv4 / she
                  :polite +)
            :ARG2 (vv5 / over
                  :op1 (vv6 / dinner))
            :time (vv7 / week
                  :mod (vv8 / last)))
      :snt2 (vv9 / have-03
            :ARG0 (vv10 / and
                  :op1 (vv11 / person
                        :ARG0-of (vv12 / have-rel-role-91
                              :ARG1 vv3
                              :ARG2 (vv14 / husband)))
                  :op2 vv3)
            :ARG1 (vv16 / problem
                  :polarity -
                  :topic (vv17 / food)))
      :snt3 (vv18 / seem-01
            :ARG1 (vv19 / feed-01
                  :ARG0 vv3
                  :ARG1 (vv21 / and
                        :op1 (vv22 / meat
                              :mod (vv23 / old)
                              :poss (vv24 / she
                                    :polite +))
                        :op2 (vv25 / vegetable
                              :ARG1-of (vv26 / rot-01))))
            :condition (vv27 / listen-01
                  :ARG0 (vv28 / you)
                  :ARG1 vv4
                  :mod (vv33 / just)))
      :snt3 (vv30 / possible-01
            :ARG1 (vv31 / please-01
                  :ARG0 (vv32 / nothing))))

# ::id 94
# ::snt No  ,  I can't see that happening  .  I know you're a good cook and nothing like that would ever happen  .
# ::tokens ["No", ",", "I", "ca", "n't", "see", "that", "happening", ".", "I", "know", "you", "'re", "a", "good", "cook", "and", "nothing", "like", "that", "would", "ever", "happen", "."]
# ::lemmas ["no", ",", "I", "can", "not", "see", "that", "happen", ".", "I", "know", "you", "be", "a", "good", "cook", "and", "nothing", "like", "that", "would", "ever", "happen", "."]
# ::pos_tags ["UH", ",", "PRP", "MD", "RB", "VB", "IN", "VBG", ".", "PRP", "VBP", "PRP", "VBP", "DT", "JJ", "NN", "CC", "NN", "IN", "DT", "MD", "RB", "VB", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "TITLE", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::abstract_map {}
(vv1 / multi-sentence
      :snt1 (vv2 / possible-01
            :ARG1 (vv3 / see-01
                  :ARG0 (vv4 / i)
                  :ARG1 (vv5 / that))
            :polarity -)
      :snt2 (vv6 / know-01
            :ARG0 (vv7 / i)
            :ARG1 (vv8 / and
                  :op1 (vv9 / cook-01
                        :ARG0 (vv10 / you)
                        :ARG1-of (vv11 / good-02
                              :degree (vv12 / most)))
                  :op2 (vv13 / nothing
                        :ARG1-of (vv14 / resemble-01
                              :ARG2 (vv15 / that))
                        :time (vv16 / ever)))))

# ::id 95
# ::snt It's not just that  .  She also criticizes how we raise the kids  .
# ::tokens ["It", "'s", "not", "just", "that", ".", "She", "also", "criticizes", "how", "we", "raise", "the", "kids", "."]
# ::lemmas ["it", "be", "not", "just", "that", ".", "she", "also", "criticize", "how", "we", "raise", "the", "kid", "."]
# ::pos_tags ["PRP", "VBZ", "RB", "RB", "DT", ".", "PRP", "RB", "VBZ", "WRB", "PRP", "VBP", "DT", "NNS", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::abstract_map {}
(vv1 / multi-sentence
      :snt1 (vv2 / that
            :mod (vv3 / just))
      :snt2 (vv4 / criticize-01
            :ARG0 (vv5 / she)
            :ARG1 (vv6 / thing
                  :manner-of (vv7 / raise-01
                        :ARG0 (vv8 / we)
                        :ARG1 (vv9 / kid)))
            :mod (vv10 / also)
            :polarity -))

# ::id 96
# ::snt My mother-in-law used to do the same thing to us  .  If it wasn't disciplining them enough  ,  then we were disciplining them too much  .  She also complained about the food we fed them  ,  the schools we sent them too  ,  and everything else under the sun  .
# ::tokens ["My", "mother", "-", "in", "-", "law", "used", "to", "do", "the", "same", "thing", "to", "us", ".", "If", "it", "was", "n't", "disciplining", "them", "enough", ",", "then", "we", "were", "disciplining", "them", "too", "much", ".", "She", "also", "complained", "about", "the", "food", "we", "fed", "them", ",", "the", "schools", "we", "sent", "them", "too", ",", "and", "everything", "else", "under", "the", "sun", "."]
# ::lemmas ["my", "mother", "-", "in", "-", "law", "use", "to", "do", "the", "same", "thing", "to", "we", ".", "if", "it", "be", "not", "discipline", "they", "enough", ",", "then", "we", "be", "discipline", "they", "too", "much", ".", "she", "also", "complain", "about", "the", "food", "we", "feed", "they", ",", "the", "school", "we", "send", "they", "too", ",", "and", "everything", "else", "under", "the", "sun", "."]
# ::pos_tags ["PRP$", "NN", "HYPH", "IN", "HYPH", "NN", "VBN", "TO", "VB", "DT", "JJ", "NN", "IN", "PRP", ".", "IN", "PRP", "VBD", "RB", "VBG", "PRP", "RB", ",", "RB", "PRP", "VBD", "VBG", "PRP", "RB", "RB", ".", "PRP", "RB", "VBD", "IN", "DT", "NN", "PRP", "VBD", "PRP", ",", "DT", "NNS", "PRP", "VBD", "PRP", "RB", ",", "CC", "NN", "RB", "IN", "DT", "NN", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::abstract_map {}
(vv1 / multi-sentence
      :snt1 (vv2 / do-02
            :ARG0 (vv3 / person
                  :ARG0-of (vv4 / have-rel-role-91
                        :ARG1 (vv5 / i)
                        :ARG2 (vv6 / mother)))
            :ARG1 (vv7 / law
                  :ARG1-of (vv8 / same-01))
            :ARG2 (vv9 / we))
      :snt1 vv3
      :snt2 (vv10 / use-01
            :ARG0 vv3
            :ARG1 (vv12 / thing
                  :ARG1-of (vv13 / same-01
                        :degree (vv14 / too))))
      :snt2 (vv15 / criticize-01
            :ARG1 vv3
            :mod (vv18 / much
                  :degree (vv19 / too)))
      :snt2 (vv20 / employ-02
            :ARG0 vv3
            :degree (vv23 / enough
                  :ARG1 vv3))
      :snt3 (vv24 / complain-01
            :ARG0 vv3
            :ARG1 (vv26 / and
                  :op1 (vv27 / food
                        :ARG1-of (vv28 / feed-01
                              :ARG0 vv3)
                        :poss vv3)
                  :op2 (vv31 / school
                        :ARG1-of (vv32 / send-01
                              :ARG0 vv3)
                        :poss vv3)
                  :op3 (vv35 / everything
                        :mod (vv36 / else)))
            :location (vv38 / sun)
            :mod (vv37 / also)))

# ::id 97
# ::snt You said she used to  ?  How did you stop her  ?
# ::tokens ["You", "said", "she", "used", "to", "?", "How", "did", "you", "stop", "her", "?"]
# ::lemmas ["you", "say", "she", "use", "to", "?", "how", "do", "you", "stop", "she", "?"]
# ::pos_tags ["PRP", "VBD", "PRP", "VBD", "TO", ".", "WRB", "VBD", "PRP", "VB", "PRP", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::abstract_map {}
(vv1 / multi-sentence
      :snt1 (vv2 / say-01
            :ARG0 (vv3 / you)
            :ARG1 (vv4 / use-01
                  :ARG0 (vv5 / she)
                  :ARG1 (vv6 / amr-unknown)))
      :snt2 (vv7 / stop-01
            :ARG0 (vv8 / you)
            :ARG1 (vv9 / she)
            :manner (vv10 / amr-unknown)))

# ::id 98
# ::snt We basically sat her down and told her how we felt about her constant criticizing  ,  and how we welcomed her advice but hoped she'd let us do our things  .  She understood  ,  and now everything is a lot more peaceful  .
# ::tokens ["We", "basically", "sat", "her", "down", "and", "told", "her", "how", "we", "felt", "about", "her", "constant", "criticizing", ",", "and", "how", "we", "welcomed", "her", "advice", "but", "hoped", "she", "'d", "let", "us", "do", "our", "things", ".", "She", "understood", ",", "and", "now", "everything", "is", "a", "lot", "more", "peaceful", "."]
# ::lemmas ["we", "basically", "sit", "she", "down", "and", "tell", "she", "how", "we", "feel", "about", "she", "constant", "criticize", ",", "and", "how", "we", "welcome", "she", "advice", "but", "hope", "she", "would", "let", "we", "do", "we", "thing", ".", "she", "understand", ",", "and", "now", "everything", "be", "a", "lot", "more", "peaceful", "."]
# ::pos_tags ["PRP", "RB", "VBD", "PRP$", "RB", "CC", "VBD", "PRP$", "WRB", "PRP", "VBD", "IN", "PRP", "JJ", "VBG", ",", "CC", "WRB", "PRP", "VBD", "PRP$", "NN", "CC", "VBD", "PRP", "MD", "VB", "PRP", "VB", "PRP$", "NNS", ".", "PRP", "VBD", ",", "CC", "RB", "NN", "VBZ", "DT", "NN", "RBR", "JJ", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "DATE", "O", "O", "O", "O", "O", "O", "O"]
# ::abstract_map {}
(vv1 / multi-sentence
      :snt1 (vv2 / and
            :op1 (vv3 / sit-01
                  :ARG1 (vv4 / we)
                  :ARG2 (vv5 / she)
                  :ARG2 (vv6 / down)
                  :mod (vv7 / basic))
            :op2 (vv8 / tell-01
                  :ARG0 vv4
                  :ARG1 (vv10 / thing
                        :ARG1-of (vv11 / feel-01
                              :ARG0 vv5
                              :ARG2 (vv13 / criticize-01
                                    :ARG0 vv5
                                    :manner (vv16 / constant))))
                  :ARG2 vv5))
      :snt1 vv5
      :snt2 (vv17 / welcome-01
            :ARG1 vv5
            :ARG2 (vv20 / advise-01
                  :ARG0 vv5))
      :snt3 (vv22 / hope-01
            :ARG0 vv5
            :ARG1 (vv24 / let-01
                  :ARG0 vv5
                  :ARG1 (vv26 / do-02
                        :ARG0 vv5
                        :ARG1 (vv28 / thing
                              :poss vv5))))
      :snt3 (vv30 / understand-01
            :ARG0 vv5
            :ARG1 (vv32 / peaceful
                  :degree (vv33 / more
                        :degree (vv34 / lot)))
            :time (vv35 / now)))

# ::id 99
# ::snt That sounds like a good idea  .  I'll have to try that  .
# ::tokens ["That", "sounds", "like", "a", "good", "idea", ".", "I", "'ll", "have-to", "try", "that", "."]
# ::lemmas ["that", "sound", "like", "a", "good", "idea", ".", "I", "will", "have-to", "try", "that", "."]
# ::pos_tags ["DT", "VBZ", "IN", "DT", "JJ", "NN", ".", "PRP", "MD", "COMP", "VB", "DT", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "0", "O", "O", "O"]
# ::abstract_map {}
(vv1 / multi-sentence
      :snt1 (vv2 / sound-01
            :ARG1 (vv3 / that)
            :ARG2 (vv4 / idea
                  :ARG1-of (vv5 / good-02
                        :degree (vv6 / more))))
      :snt2 (vv7 / obligate-01
            :ARG1 (vv8 / i)
            :ARG2 (vv9 / try-01
                  :ARG0 vv8
                  :ARG1 (vv11 / that))))

# ::id 103
# ::snt How are Zina's new programmers working out  ?
# ::tokens ["How", "are", "Zina", "'s", "new", "programmers", "working-out", "?"]
# ::lemmas ["how", "be", "Zina", "'s", "new", "programmer", "work-out", "?"]
# ::pos_tags ["WRB", "VBP", "NNP", "POS", "JJ", "NNS", "COMP", "."]
# ::ner_tags ["O", "O", "PERSON", "O", "O", "O", "0", "O"]
# ::abstract_map {}
(vv1 / work-out-02
      :ARG1 (vv2 / person
            :ARG1-of (vv4 / new-01)
            :quant (vv3 / amr-unknown)))

# ::id 104
# ::snt I hate to admit it  ,  but they're good  .  And fast  .  The Filipino kid is a genius  .
# ::tokens ["I", "hate", "to", "admit", "it", ",", "but", "they", "'re", "good", ".", "And", "fast", ".", "The", "Filipino", "kid", "is", "a", "genius", "."]
# ::lemmas ["I", "hate", "to", "admit", "it", ",", "but", "they", "be", "good", ".", "and", "fast", ".", "the", "Filipino", "kid", "be", "a", "genius", "."]
# ::pos_tags ["PRP", "VBP", "TO", "VB", "PRP", ",", "CC", "PRP", "VBP", "JJ", ",", "CC", "RB", ".", "DT", "NNP", "NN", "VBZ", "DT", "NN", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "NATIONALITY", "O", "O", "O", "O", "O"]
# ::abstract_map {}
(vv1 / multi-sentence
      :snt1 (vv2 / hate-01
            :ARG0 (vv3 / i)
            :ARG1 (vv4 / admit-01
                  :ARG0 vv3
                  :ARG1 (vv6 / it)))
      :snt2 (vv7 / good-02
            :ARG1 (vv8 / they))
      :snt2 (vv13 / genius
            :domain (vv14 / kid
                  :name (vv15 / Filipino)))
      :snt3 (vv9 / and
            :op1 (vv10 / fast-02
                  :ARG1 (vv11 / they))
            :op2 (vv12 / fast-02)))

# ::id 105
# ::snt So you'll make the Stars . com deadline  ,  and have us up and running next week  ?
# ::tokens ["So", "you", "'ll", "make", "the", "Stars", ".", "com", "deadline", ",", "and", "have", "us", "up", "and", "running", "next", "week", "?"]
# ::lemmas ["so", "you", "will", "make", "the", "Stars", ".", "com", "deadline", ",", "and", "have", "we", "up", "and", "run", "next", "week", "?"]
# ::pos_tags ["RB", "PRP", "MD", "VB", "DT", "NNPS", ".", "NN", "NN", ",", "CC", "VBP", "PRP", "RP", "CC", "VBG", "JJ", "NN", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "DATE", "DATE", "O"]
# ::abstract_map {}
(vv1 / and
      :op1 (vv2 / make-01
            :ARG0 (vv3 / you)
            :ARG1 (vv4 / deadline
                  :mod (vv5 / give-a-shit-00)))
      :op2 (vv6 / and
            :mode interrogative
            :op1 (vv8 / up)
            :op1 (vv9 / we)
            :op2 (vv11 / run-02
                  :ARG1 vv8)
            :time (vv13 / week
                  :mod (vv14 / next))))

# ::id 106
# ::snt It'll be close  ,  but we'll make it  .
# ::tokens ["It", "'ll", "be", "close", ",", "but", "we", "'ll", "make-it", "."]
# ::lemmas ["it", "will", "be", "close", ",", "but", "we", "will", "make-it", "."]
# ::pos_tags ["PRP", "MD", "VB", "RB", ",", "CC", "PRP", "MD", "COMP", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "0", "O"]
# ::abstract_map {}
(vv1 / contrast-01
      :ARG1 (vv2 / close-10
            :ARG1 (vv3 / it))
      :ARG2 (vv4 / make-01
            :ARG0 (vv5 / we)
            :ARG1 (vv6 / it)))

# ::id 107
# ::snt Good  .  After Stars . com starts paying us  ,  we won't need Vikam's cash anymore  .
# ::tokens ["Good", ".", "After", "Stars", ".", "com", "starts", "paying", "us", ",", "we", "wo", "n't", "need", "Vikam", "'s", "cash", "anymore", "."]
# ::lemmas ["good", ".", "after", "Stars", ".", "com", "start", "pay", "we", ",", "we", "will", "not", "need", "Vikam", "'s", "cash", "anymore", "."]
# ::pos_tags ["JJ", ".", "IN", "NNPS", ".", "NN", "VBZ", "VBG", "PRP", ",", "PRP", "MD", "RB", "VB", "NNP", "POS", "NN", "RB", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "PERSON", "O", "O", "O", "O"]
# ::abstract_map {}
(vv1 / multi-sentence
      :snt1 (vv2 / good-02
            :ARG1 (vv3 / good-02))
      :snt2 (vv4 / need-01
            :ARG0 (vv5 / we)
            :ARG1 (vv6 / cash
                  :poss (vv7 / company
                        :name (vv8 / n)))
            :time (vv9 / anymore)
            :time (vv10 / after
                  :op1 (vv11 / start-01
                        :ARG1 (vv12 / dock-01)))))

# ::id 108
# ::snt And if we don't need them  ,  we won't need Zina  ,  either  .
# ::tokens ["And", "if", "we", "do", "n't", "need", "them", ",", "we", "wo", "n't", "need", "Zina", ",", "either", "."]
# ::lemmas ["and", "if", "we", "do", "not", "need", "they", ",", "we", "will", "not", "need", "Zina", ",", "either", "."]
# ::pos_tags ["CC", "IN", "PRP", "VBP", "RB", "VB", "PRP", ",", "PRP", "MD", "RB", "VB", "NNP", ",", "RB", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "PERSON", "O", "O", "O"]
# ::abstract_map {}
(vv1 / and
      :op2 (vv2 / need-01
            :ARG0 (vv3 / we)
            :ARG1 (vv4 / string-entity
                  :value "no more")
            :condition (vv6 / need-01
                  :ARG0 vv3
                  :ARG1 (vv8 / they)
                  :mod (vv9 / either)
                  :polarity -)))

# ::id 112
# ::snt Do you like cooking  ?
# ::tokens ["Do", "you", "like", "cooking", "?"]
# ::lemmas ["do", "you", "like", "cook", "?"]
# ::pos_tags ["VBP", "PRP", "IN", "VBG", "."]
# ::ner_tags ["O", "O", "O", "O", "O"]
# ::abstract_map {}
(vv1 / like-01
      :ARG0 (vv3 / you)
      :ARG1 (vv4 / drive-01)
      :mode interrogative)

# ::id 113
# ::snt Yes  .  I like cooking very much  .  I got this hobby when I was 12 years sold  .
# ::tokens ["Yes", ".", "I", "like", "cooking", "very", "much", ".", "I", "got", "this", "hobby", "when", "I", "was", "10", "years", "sold", "."]
# ::lemmas ["yes", ".", "I", "like", "cook", "very", "much", ".", "I", "get", "this", "hobby", "when", "I", "be", "10", "year", "sell", "."]
# ::pos_tags ["UH", ".", "PRP", "VBP", "VBG", "RB", "RB", ".", "PRP", "VBD", "DT", "NN", "WRB", "PRP", "VBD", "CD", "NNS", "VBN", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "NUMBER", "DURATION", "O", "O"]
# ::abstract_map {"10": {"type": "quantity", "span": "12", "ner": "_QUANTITY_10", "value": 12}}
(vv1 / multi-sentence
      :snt1 (vv2 / yes)
      :snt2 (vv3 / like-01
            :ARG0 (vv4 / i)
            :ARG1 (vv5 / drink-01
                  :quant (vv6 / much
                        :degree (vv7 / very))))
      :snt2 (vv8 / get-01
            :ARG0 vv4
            :ARG1 (vv10 / hobby
                  :mod (vv11 / this))
            :duration (vv12 / temporal-quantity
                  :quant 12
                  :unit (vv14 / year))))

# ::id 114
# ::snt Why do you like it  ?
# ::tokens ["Why", "do", "you", "like", "it", "?"]
# ::lemmas ["why", "do", "you", "like", "it", "?"]
# ::pos_tags ["WRB", "VBP", "PRP", "IN", "PRP", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O"]
# ::abstract_map {}
(vv1 / like-01
      :ARG0 (vv2 / you)
      :ARG1 (vv3 / it)
      :ARG1-of (vv4 / cause-01
            :ARG0 (vv5 / amr-unknown)))

# ::id 115
# ::snt I have no idea  .  I like cooking by myself  .  I like to taste delicious food  .
# ::tokens ["I", "have", "no", "idea", ".", "I", "like", "cooking", "by", "myself", ".", "I", "like", "to", "taste", "delicious", "food", "."]
# ::lemmas ["I", "have", "no", "idea", ".", "I", "like", "cook", "by", "myself", ".", "I", "like", "to", "taste", "delicious", "food", "."]
# ::pos_tags ["PRP", "VBP", "DT", "NN", ".", "PRP", "VBP", "VBG", "IN", "PRP", ".", "PRP", "VBP", "TO", "VB", "JJ", "NN", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::abstract_map {}
(vv1 / multi-sentence
      :snt1 (vv2 / have-03
            :ARG0 (vv3 / i)
            :ARG1 (vv4 / idea
                  :polarity -))
      :snt2 (vv5 / like-01
            :ARG0 vv3
            :ARG1 (vv7 / roof-01))
      :snt2 (vv8 / like-01
            :ARG0 vv3
            :ARG1 (vv10 / thing
                  :ARG2-of (vv11 / taste-02
                        :ARG0 vv3
                        :ARG2 (vv13 / food
                              :mod (vv14 / delicious))))))

# ::id 116
# ::snt That's wonderful  !
# ::tokens ["That", "'s", "wonderful", "!"]
# ::lemmas ["that", "be", "wonderful", "!"]
# ::pos_tags ["DT", "VBZ", "JJ", "."]
# ::ner_tags ["O", "O", "O", "O"]
# ::abstract_map {}
(vv1 / wonderful-03
      :ARG1 (vv2 / that))

# ::id 117
# ::snt And I love trying new recipes  ,  which I usually test with my friends  .  You can come  ,  too  .
# ::tokens ["And", "I", "love", "trying", "new", "recipes", ",", "which", "I", "usually", "test", "with", "my", "friends", ".", "You", "can", "come", ",", "too", "."]
# ::lemmas ["and", "I", "love", "try", "new", "recipe", ",", "which", "I", "usually", "test", "with", "my", "friend", ".", "you", "can", "come", ",", "too", "."]
# ::pos_tags ["CC", "PRP", "VBP", "VBG", "JJ", "NNS", ",", "WDT", "PRP", "RB", "VBP", "IN", "PRP$", "NNS", ".", "PRP", "MD", "VB", ",", "RB", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::abstract_map {}
(vv1 / multi-sentence
      :snt1 (vv2 / and
            :op2 (vv3 / love-01
                  :ARG0 (vv4 / i)
                  :ARG1 (vv5 / try-01
                        :ARG0 vv4
                        :ARG1 (vv7 / recipe
                              :ARG1-of (vv8 / new-01)
                              :ARG1-of (vv9 / test-01
                                    :ARG0 vv4
                                    :ARG2 (vv12 / person
                                          :ARG0-of (vv13 / have-rel-role-91
                                                :ARG1 vv4
                                                :ARG2 (vv15 / friend)))
                                    :mod (vv11 / usual))))))
      :snt2 (vv16 / possible-01
            :ARG1 (vv17 / come-01
                  :ARG1 (vv18 / you)
                  :mod (vv19 / too))))

# ::id 118
# ::snt Really  ?  I hope I can have a chance to taste it  .  Don't forget to tell me  .
# ::tokens ["Really", "?", "I", "hope", "I", "can", "have", "a", "chance", "to", "taste", "it", ".", "Do", "n't", "forget", "to", "tell", "me", "."]
# ::lemmas ["really", "?", "I", "hope", "I", "can", "have", "a", "chance", "to", "taste", "it", ".", "do", "not", "forget", "to", "tell", "I", "."]
# ::pos_tags ["RB", ",", "PRP", "VBP", "PRP", "MD", "VB", "DT", "NN", "TO", "VB", "PRP", ".", "VB", "RB", "VB", "TO", "VB", "PRP", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::abstract_map {}
(vv1 / multi-sentence
      :snt1 (vv2 / real-04)
      :snt1 (vv3 / hope-01
            :ARG0 (vv4 / i)
            :ARG1 (vv5 / possible-01
                  :ARG1 (vv6 / chance-02
                        :ARG0 vv4
                        :ARG1 (vv8 / taste-02
                              :ARG1 vv4
                              :ARG1 (vv10 / it)))))
      :snt2 (vv11 / forget-01
            :ARG0 (vv13 / you)
            :ARG1 (vv14 / tell-01
                  :ARG0 vv13
                  :ARG2 vv4)
            :mode imperative
            :polarity -))

# ::id 119
# ::snt Certainly  .
# ::tokens ["Certainly", "."]
# ::lemmas ["certainly", "."]
# ::pos_tags ["RB", "."]
# ::ner_tags ["O", "O"]
# ::abstract_map {}
(vv1 / certain)

# ::id 123
# ::snt Anyone home  ?  Jen  !
# ::tokens ["Anyone", "home", "?", "Jen", "!"]
# ::lemmas ["anyone", "home", "?", "Jen", "!"]
# ::pos_tags ["NN", "NN", ".", "NNP", "."]
# ::ner_tags ["O", "O", "O", "PERSON", "O"]
# ::abstract_map {}
(vv1 / say-01
      :ARG0 (vv2 / i)
      :ARG1 (vv3 / person
            :domain vv2
            :mod (vv5 / home)
            :mode interrogative))

# ::id 124
# ::snt I'm in the kitchen  .  .  .  let yourself in  !
# ::tokens ["I", "'m", "in", "the", "kitchen", ".", ".", ".", "let", "yourself", "in", "!"]
# ::lemmas ["I", "be", "in", "the", "kitchen", ".", ".", ".", "let", "yourself", "in", "!"]
# ::pos_tags ["PRP", "VBP", "IN", "DT", "NN", ".", ".", ".", "VB", "PRP", "IN", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]
# ::abstract_map {}
(vv1 / multi-sentence
      :snt1 (vv2 / be-located-at-91
            :ARG1 (vv3 / i)
            :ARG2 (vv4 / kitchen))
      :snt2 (vv5 / let-01
            :ARG0 (vv7 / you)
            :mode imperative)
      :snt3 vv7)

# ::id 125
# ::snt Wow  !  You're really working up a storm  !
# ::tokens ["Wow", "!", "You", "'re", "really", "working-up", "a", "storm", "!"]
# ::lemmas ["wow", "!", "you", "be", "really", "work-up", "a", "storm", "!"]
# ::pos_tags ["UH", ",", "PRP", "VBP", "RB", "COMP", "DT", "NN", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "0", "O", "CAUSE_OF_DEATH", "O"]
# ::abstract_map {}
(vv1 / multi-sentence
      :snt1 (vv2 / wow
            :mode expressive)
      :snt2 (vv4 / work-up-04
            :ARG0 (vv5 / you)
            :ARG1 (vv6 / storm-01)
            :ARG1-of (vv7 / real-04)))

# ::id 126
# ::snt I know  .  I've even worked up a sweat  .
# ::tokens ["I", "know", ".", "I", "'ve", "even", "worked-up", "a", "sweat", "."]
# ::lemmas ["I", "know", ".", "I", "have", "even", "work-up", "a", "sweat", "."]
# ::pos_tags ["PRP", "VBP", ".", "PRP", "VBP", "RB", "COMP", "DT", "NN", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "0", "O", "O", "O"]
# ::abstract_map {}
(vv1 / multi-sentence
      :snt1 (vv2 / know-01
            :ARG0 (vv3 / i))
      :snt2 (vv4 / work-up-04
            :ARG0 (vv5 / i)
            :ARG1 (vv6 / sweat)
            :mod (vv7 / even)))

# ::id 127
# ::snt You look like a cooking show host--only messier  .
# ::tokens ["You", "look", "like", "a", "cooking", "show", "host", "--", "only", "messier", "."]
# ::lemmas ["you", "look", "like", "a", "cooking", "show", "host", "--", "only", "messier", "."]
# ::pos_tags ["PRP", "VBP", "IN", "DT", "NN", "NN", "NN", ":", "RB", "JJR", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "TITLE", "O", "O", "O", "O"]
# ::abstract_map {}
(vv1 / look-02
      :ARG0 (vv2 / you)
      :ARG1 (vv3 / person
            :ARG0-of (vv4 / host-01
                  :ARG1 (vv5 / show-04
                        :ARG1 (vv6 / cook-01)))
            :mod (vv7 / messier
                  :mod (vv9 / only)
                  :name (vv8 / messier))))

# ::id 131
# ::snt You look so tan and healthy  !
# ::tokens ["You", "look", "so", "tan", "and", "healthy", "!"]
# ::lemmas ["you", "look", "so", "tan", "and", "healthy", "!"]
# ::pos_tags ["PRP", "VBP", "RB", "JJ", "CC", "JJ", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O"]
# ::abstract_map {}
(vv1 / look-02
      :ARG0 (vv2 / you)
      :ARG1 (vv3 / and
            :op1 (vv4 / color
                  :degree (vv5 / so))
            :op2 (vv6 / healthy
                  :degree vv5)))

# ::id 132
# ::snt Thanks  .  I just got back from summer camp  .
# ::tokens ["Thanks", ".", "I", "just", "got-back", "from", "summer", "camp", "."]
# ::lemmas ["thanks", ".", "I", "just", "get-back", "from", "summer", "camp", "."]
# ::pos_tags ["NN", ".", "PRP", "RB", "COMP", "IN", "NN", "NN", "."]
# ::ner_tags ["O", "O", "O", "O", "0", "O", "DATE", "O", "O"]
# ::abstract_map {}
(vv1 / multi-sentence
      :snt1 (vv2 / thank-01
            :ARG0 (vv3 / i)
            :ARG1 (vv4 / you)
            :ARG2 (vv5 / camp
                  :location (vv6 / summer))
            :mod (vv7 / just)))

# ::id 133
# ::snt How was it  ?
# ::tokens ["How", "was", "it", "?"]
# ::lemmas ["how", "be", "it", "?"]
# ::pos_tags ["WRB", "VBD", "PRP", "."]
# ::ner_tags ["O", "O", "O", "O"]
# ::abstract_map {}
(vv1 / amr-unknown)

# ::id 134
# ::snt Great  .  I got to try so many things for the first time  .
# ::tokens ["Great", ".", "I", "got", "to", "try", "so", "many", "things", "for", "the", "ORDINAL_ENTITY_1", "time", "."]
# ::lemmas ["Great", ".", "I", "get", "to", "try", "so", "many", "thing", "for", "the", "ORDINAL_ENTITY_1", "time", "."]
# ::pos_tags ["NNP", ".", "PRP", "VBD", "TO", "VB", "RB", "JJ", "NNS", "IN", "DT", "JJ", "NN", "."]
# ::ner_tags ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "ORDINAL_ENTITY", "O", "O"]
# ::abstract_map {"ORDINAL_ENTITY_1": {"type": "ordinal-entity", "span": "1", "ner": "ORDINAL_ENTITY", "ops": ["1"]}}
(vv1 / multi-sentence
      :snt1 (vv2 / great
            :mod (vv3 / certain))
      :snt2 (vv4 / get-22
            :ARG0 (vv5 / i)
            :ARG1 (vv6 / try-01
                  :ARG0 vv5
                  :ARG1 (vv8 / thing
                        :quant (vv9 / many
                              :degree (vv10 / so)))
                  :ord (vv11 / ordinal-entity
                        :value 1))))

# ::id 135
# ::snt Like what  ?
# ::tokens ["Like", "what", "?"]
# ::lemmas ["like", "what", "?"]
# ::pos_tags ["UH", "WP", "."]
# ::ner_tags ["O", "O", "O"]
# ::abstract_map {}
(vv1 / resemble-01
      :ARG2 (vv2 / amr-unknown))

